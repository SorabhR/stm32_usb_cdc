
usb_cdc_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c38  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006dc0  08006dc0  00007dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e24  08006e24  00008100  2**0
                  CONTENTS
  4 .ARM          00000008  08006e24  08006e24  00007e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e2c  08006e2c  00008100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e2c  08006e2c  00007e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e30  08006e30  00007e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08006e34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008100  2**0
                  CONTENTS
 10 .bss          00001c14  20000100  20000100  00008100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d14  20001d14  00008100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d56a  00000000  00000000  00008130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f4  00000000  00000000  0001569a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  00018090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000854  00000000  00000000  00018be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022664  00000000  00000000  00019434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7f6  00000000  00000000  0003ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3ebe  00000000  00000000  0004b28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f14c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ccc  00000000  00000000  0010f190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00111e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006da8 	.word	0x08006da8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08006da8 	.word	0x08006da8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b598      	push	{r3, r4, r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f99c 	bl	8000808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f82e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f894 	bl	8000600 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d8:	f005 feea 	bl	80062b0 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag==1 && buffer=='1'){
 80004dc:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <main+0x58>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10b      	bne.n	80004fc <main+0x34>
 80004e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <main+0x5c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b31      	cmp	r3, #49	@ 0x31
 80004ea:	d107      	bne.n	80004fc <main+0x34>
		  HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_13);
 80004ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f0:	480d      	ldr	r0, [pc, #52]	@ (8000528 <main+0x60>)
 80004f2:	f000 fce6 	bl	8000ec2 <HAL_GPIO_TogglePin>
		  flag = 0;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <main+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
	  }
	  CDC_Transmit_FS((uint8_t*)data, strlen(data));
 80004fc:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <main+0x64>)
 80004fe:	681c      	ldr	r4, [r3, #0]
 8000500:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <main+0x64>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe5f 	bl	80001c8 <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	b29b      	uxth	r3, r3
 800050e:	4619      	mov	r1, r3
 8000510:	4620      	mov	r0, r4
 8000512:	f005 ffc1 	bl	8006498 <CDC_Transmit_FS>
	  HAL_Delay (1000);
 8000516:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800051a:	f000 f9e7 	bl	80008ec <HAL_Delay>
	  if (flag==1 && buffer=='1'){
 800051e:	e7dd      	b.n	80004dc <main+0x14>
 8000520:	20000120 	.word	0x20000120
 8000524:	2000011c 	.word	0x2000011c
 8000528:	40020c00 	.word	0x40020c00
 800052c:	20000000 	.word	0x20000000

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	@ 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f006 fc06 	bl	8006d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <SystemClock_Config+0xc8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a26      	ldr	r2, [pc, #152]	@ (80005f8 <SystemClock_Config+0xc8>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a20      	ldr	r2, [pc, #128]	@ (80005fc <SystemClock_Config+0xcc>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005a4:	2348      	movs	r3, #72	@ 0x48
 80005a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005ac:	2303      	movs	r3, #3
 80005ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fef1 	bl	800239c <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c0:	f000 f87e 	bl	80006c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2102      	movs	r1, #2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 f953 	bl	800288c <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005ec:	f000 f868 	bl	80006c0 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	@ 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	@ 0x28
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a26      	ldr	r2, [pc, #152]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a1f      	ldr	r2, [pc, #124]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a18      	ldr	r2, [pc, #96]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a11      	ldr	r2, [pc, #68]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_GPIO_Init+0xb8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800068c:	480b      	ldr	r0, [pc, #44]	@ (80006bc <MX_GPIO_Init+0xbc>)
 800068e:	f000 fbff 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_GPIO_Init+0xbc>)
 80006ac:	f000 fa54 	bl	8000b58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	@ 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020c00 	.word	0x40020c00

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <Error_Handler+0x8>

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006da:	4a0f      	ldr	r2, [pc, #60]	@ (8000718 <HAL_MspInit+0x4c>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <HAL_MspInit+0x4c>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f6:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <HAL_MspInit+0x4c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <HAL_MspInit+0x4c>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800070a:	2007      	movs	r0, #7
 800070c:	f000 f9e2 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <NMI_Handler+0x4>

08000724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <UsageFault_Handler+0x4>

08000744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f89b 	bl	80008ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000780:	4802      	ldr	r0, [pc, #8]	@ (800078c <OTG_FS_IRQHandler+0x10>)
 8000782:	f000 fcfc 	bl	800117e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20001610 	.word	0x20001610

08000790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <SystemInit+0x20>)
 8000796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800079a:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <SystemInit+0x20>)
 800079c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007b8:	f7ff ffea 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	@ (80007f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f006 fabd 	bl	8006d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e6:	f7ff fe6f 	bl	80004c8 <main>
  bx  lr    
 80007ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80007f8:	08006e34 	.word	0x08006e34
  ldr r2, =_sbss
 80007fc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000800:	20001d14 	.word	0x20001d14

08000804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC_IRQHandler>
	...

08000808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <HAL_Init+0x40>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0d      	ldr	r2, [pc, #52]	@ (8000848 <HAL_Init+0x40>)
 8000812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <HAL_Init+0x40>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <HAL_Init+0x40>)
 800081e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <HAL_Init+0x40>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a07      	ldr	r2, [pc, #28]	@ (8000848 <HAL_Init+0x40>)
 800082a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800082e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 f94f 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f808 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800083c:	f7ff ff46 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023c00 	.word	0x40023c00

0800084c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_InitTick+0x54>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_InitTick+0x58>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000862:	fbb3 f3f1 	udiv	r3, r3, r1
 8000866:	fbb2 f3f3 	udiv	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f967 	bl	8000b3e <HAL_SYSTICK_Config>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e00e      	b.n	8000898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d80a      	bhi.n	8000896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f000 f92f 	bl	8000aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800088c:	4a06      	ldr	r2, [pc, #24]	@ (80008a8 <HAL_InitTick+0x5c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000892:	2300      	movs	r3, #0
 8000894:	e000      	b.n	8000898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000004 	.word	0x20000004
 80008a4:	2000000c 	.word	0x2000000c
 80008a8:	20000008 	.word	0x20000008

080008ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_IncTick+0x20>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_IncTick+0x24>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	4a04      	ldr	r2, [pc, #16]	@ (80008d0 <HAL_IncTick+0x24>)
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	2000000c 	.word	0x2000000c
 80008d0:	20000124 	.word	0x20000124

080008d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return uwTick;
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <HAL_GetTick+0x14>)
 80008da:	681b      	ldr	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000124 	.word	0x20000124

080008ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f4:	f7ff ffee 	bl	80008d4 <HAL_GetTick>
 80008f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000904:	d005      	beq.n	8000912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000906:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <HAL_Delay+0x44>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4413      	add	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000912:	bf00      	nop
 8000914:	f7ff ffde 	bl	80008d4 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	429a      	cmp	r2, r3
 8000922:	d8f7      	bhi.n	8000914 <HAL_Delay+0x28>
  {
  }
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000000c 	.word	0x2000000c

08000934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <__NVIC_SetPriorityGrouping+0x44>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000950:	4013      	ands	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800095c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000966:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <__NVIC_SetPriorityGrouping+0x44>)
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	60d3      	str	r3, [r2, #12]
}
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000980:	4b04      	ldr	r3, [pc, #16]	@ (8000994 <__NVIC_GetPriorityGrouping+0x18>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	f003 0307 	and.w	r3, r3, #7
}
 800098a:	4618      	mov	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	db0b      	blt.n	80009c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	f003 021f 	and.w	r2, r3, #31
 80009b0:	4907      	ldr	r1, [pc, #28]	@ (80009d0 <__NVIC_EnableIRQ+0x38>)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	095b      	lsrs	r3, r3, #5
 80009b8:	2001      	movs	r0, #1
 80009ba:	fa00 f202 	lsl.w	r2, r0, r2
 80009be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e100 	.word	0xe000e100

080009d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	db0a      	blt.n	80009fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	490c      	ldr	r1, [pc, #48]	@ (8000a20 <__NVIC_SetPriority+0x4c>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	440b      	add	r3, r1
 80009f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009fc:	e00a      	b.n	8000a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	@ (8000a24 <__NVIC_SetPriority+0x50>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 030f 	and.w	r3, r3, #15
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	440b      	add	r3, r1
 8000a12:	761a      	strb	r2, [r3, #24]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	@ 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f1c3 0307 	rsb	r3, r3, #7
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	bf28      	it	cs
 8000a46:	2304      	movcs	r3, #4
 8000a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d902      	bls.n	8000a58 <NVIC_EncodePriority+0x30>
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3b03      	subs	r3, #3
 8000a56:	e000      	b.n	8000a5a <NVIC_EncodePriority+0x32>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43da      	mvns	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	43d9      	mvns	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	4313      	orrs	r3, r2
         );
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3724      	adds	r7, #36	@ 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff8e 	bl	80009d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff29 	bl	8000934 <__NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afc:	f7ff ff3e 	bl	800097c <__NVIC_GetPriorityGrouping>
 8000b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff ff8e 	bl	8000a28 <NVIC_EncodePriority>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5d 	bl	80009d4 <__NVIC_SetPriority>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff31 	bl	8000998 <__NVIC_EnableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffa2 	bl	8000a90 <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	@ 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	e16b      	b.n	8000e4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b74:	2201      	movs	r2, #1
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	f040 815a 	bne.w	8000e46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d005      	beq.n	8000baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d130      	bne.n	8000c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be0:	2201      	movs	r2, #1
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	091b      	lsrs	r3, r3, #4
 8000bf6:	f003 0201 	and.w	r2, r3, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d017      	beq.n	8000c48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d123      	bne.n	8000c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	08da      	lsrs	r2, r3, #3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3208      	adds	r2, #8
 8000c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	08da      	lsrs	r2, r3, #3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3208      	adds	r2, #8
 8000c96:	69b9      	ldr	r1, [r7, #24]
 8000c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0203 	and.w	r2, r3, #3
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 80b4 	beq.w	8000e46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b60      	ldr	r3, [pc, #384]	@ (8000e64 <HAL_GPIO_Init+0x30c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	4a5f      	ldr	r2, [pc, #380]	@ (8000e64 <HAL_GPIO_Init+0x30c>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cee:	4b5d      	ldr	r3, [pc, #372]	@ (8000e64 <HAL_GPIO_Init+0x30c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cfa:	4a5b      	ldr	r2, [pc, #364]	@ (8000e68 <HAL_GPIO_Init+0x310>)
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	3302      	adds	r3, #2
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	220f      	movs	r2, #15
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a52      	ldr	r2, [pc, #328]	@ (8000e6c <HAL_GPIO_Init+0x314>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d02b      	beq.n	8000d7e <HAL_GPIO_Init+0x226>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a51      	ldr	r2, [pc, #324]	@ (8000e70 <HAL_GPIO_Init+0x318>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d025      	beq.n	8000d7a <HAL_GPIO_Init+0x222>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a50      	ldr	r2, [pc, #320]	@ (8000e74 <HAL_GPIO_Init+0x31c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d01f      	beq.n	8000d76 <HAL_GPIO_Init+0x21e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4f      	ldr	r2, [pc, #316]	@ (8000e78 <HAL_GPIO_Init+0x320>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d019      	beq.n	8000d72 <HAL_GPIO_Init+0x21a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4e      	ldr	r2, [pc, #312]	@ (8000e7c <HAL_GPIO_Init+0x324>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d013      	beq.n	8000d6e <HAL_GPIO_Init+0x216>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a4d      	ldr	r2, [pc, #308]	@ (8000e80 <HAL_GPIO_Init+0x328>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d00d      	beq.n	8000d6a <HAL_GPIO_Init+0x212>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4c      	ldr	r2, [pc, #304]	@ (8000e84 <HAL_GPIO_Init+0x32c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d007      	beq.n	8000d66 <HAL_GPIO_Init+0x20e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4b      	ldr	r2, [pc, #300]	@ (8000e88 <HAL_GPIO_Init+0x330>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_GPIO_Init+0x20a>
 8000d5e:	2307      	movs	r3, #7
 8000d60:	e00e      	b.n	8000d80 <HAL_GPIO_Init+0x228>
 8000d62:	2308      	movs	r3, #8
 8000d64:	e00c      	b.n	8000d80 <HAL_GPIO_Init+0x228>
 8000d66:	2306      	movs	r3, #6
 8000d68:	e00a      	b.n	8000d80 <HAL_GPIO_Init+0x228>
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	e008      	b.n	8000d80 <HAL_GPIO_Init+0x228>
 8000d6e:	2304      	movs	r3, #4
 8000d70:	e006      	b.n	8000d80 <HAL_GPIO_Init+0x228>
 8000d72:	2303      	movs	r3, #3
 8000d74:	e004      	b.n	8000d80 <HAL_GPIO_Init+0x228>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e002      	b.n	8000d80 <HAL_GPIO_Init+0x228>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <HAL_GPIO_Init+0x228>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	69fa      	ldr	r2, [r7, #28]
 8000d82:	f002 0203 	and.w	r2, r2, #3
 8000d86:	0092      	lsls	r2, r2, #2
 8000d88:	4093      	lsls	r3, r2
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d90:	4935      	ldr	r1, [pc, #212]	@ (8000e68 <HAL_GPIO_Init+0x310>)
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dc2:	4a32      	ldr	r2, [pc, #200]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc8:	4b30      	ldr	r3, [pc, #192]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dec:	4a27      	ldr	r2, [pc, #156]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000df2:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e16:	4a1d      	ldr	r2, [pc, #116]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e40:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <HAL_GPIO_Init+0x334>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	61fb      	str	r3, [r7, #28]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	2b0f      	cmp	r3, #15
 8000e50:	f67f ae90 	bls.w	8000b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020c00 	.word	0x40020c00
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40021400 	.word	0x40021400
 8000e84:	40021800 	.word	0x40021800
 8000e88:	40021c00 	.word	0x40021c00
 8000e8c:	40013c00 	.word	0x40013c00

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	619a      	str	r2, [r3, #24]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ed4:	887a      	ldrh	r2, [r7, #2]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	041a      	lsls	r2, r3, #16
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	619a      	str	r2, [r3, #24]
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af02      	add	r7, sp, #8
 8000efc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e101      	b.n	800110c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d106      	bne.n	8000f28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f005 fc00 	bl	8006728 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f36:	d102      	bne.n	8000f3e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 ffb1 	bl	8002eaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7c1a      	ldrb	r2, [r3, #16]
 8000f50:	f88d 2000 	strb.w	r2, [sp]
 8000f54:	3304      	adds	r3, #4
 8000f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f58:	f001 fe90 	bl	8002c7c <USB_CoreInit>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d005      	beq.n	8000f6e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2202      	movs	r2, #2
 8000f66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e0ce      	b.n	800110c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 ffa9 	bl	8002ecc <USB_SetCurrentMode>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2202      	movs	r2, #2
 8000f84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e0bf      	b.n	800110c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e04a      	b.n	8001028 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3315      	adds	r3, #21
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3314      	adds	r3, #20
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	b298      	uxth	r0, r3
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	440b      	add	r3, r1
 8000fcc:	332e      	adds	r3, #46	@ 0x2e
 8000fce:	4602      	mov	r2, r0
 8000fd0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	3318      	adds	r3, #24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	331c      	adds	r3, #28
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3320      	adds	r3, #32
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	3324      	adds	r3, #36	@ 0x24
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3301      	adds	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	429a      	cmp	r2, r3
 8001030:	d3af      	bcc.n	8000f92 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e044      	b.n	80010c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	3301      	adds	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	791b      	ldrb	r3, [r3, #4]
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d3b5      	bcc.n	8001038 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7c1a      	ldrb	r2, [r3, #16]
 80010d4:	f88d 2000 	strb.w	r2, [sp]
 80010d8:	3304      	adds	r3, #4
 80010da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010dc:	f001 ff42 	bl	8002f64 <USB_DevInit>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2202      	movs	r2, #2
 80010ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00c      	b.n	800110c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f002 ff8c 	bl	8004022 <USB_DevDisconnect>

  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_PCD_Start+0x1c>
 800112c:	2302      	movs	r3, #2
 800112e:	e022      	b.n	8001176 <HAL_PCD_Start+0x62>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001140:	2b00      	cmp	r3, #0
 8001142:	d009      	beq.n	8001158 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001148:	2b01      	cmp	r3, #1
 800114a:	d105      	bne.n	8001158 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001150:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fe93 	bl	8002e88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f002 ff3a 	bl	8003fe0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800117e:	b590      	push	{r4, r7, lr}
 8001180:	b08d      	sub	sp, #52	@ 0x34
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fff8 	bl	800418a <USB_GetMode>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	f040 848c 	bne.w	8001aba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 ff5c 	bl	8004064 <USB_ReadInterrupts>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 8482 	beq.w	8001ab8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 ff49 	bl	8004064 <USB_ReadInterrupts>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d107      	bne.n	80011ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f002 0202 	and.w	r2, r2, #2
 80011ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 ff37 	bl	8004064 <USB_ReadInterrupts>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b10      	cmp	r3, #16
 80011fe:	d161      	bne.n	80012c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0210 	bic.w	r2, r2, #16
 800120e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	f003 020f 	and.w	r2, r3, #15
 800121c:	4613      	mov	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	4413      	add	r3, r2
 800122c:	3304      	adds	r3, #4
 800122e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	0c5b      	lsrs	r3, r3, #17
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	2b02      	cmp	r3, #2
 800123a:	d124      	bne.n	8001286 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001242:	4013      	ands	r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d035      	beq.n	80012b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001256:	b29b      	uxth	r3, r3
 8001258:	461a      	mov	r2, r3
 800125a:	6a38      	ldr	r0, [r7, #32]
 800125c:	f002 fd6e 	bl	8003d3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800126c:	441a      	add	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	695a      	ldr	r2, [r3, #20]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800127e:	441a      	add	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	e016      	b.n	80012b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	0c5b      	lsrs	r3, r3, #17
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	2b06      	cmp	r3, #6
 8001290:	d110      	bne.n	80012b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001298:	2208      	movs	r2, #8
 800129a:	4619      	mov	r1, r3
 800129c:	6a38      	ldr	r0, [r7, #32]
 800129e:	f002 fd4d 	bl	8003d3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ae:	441a      	add	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	699a      	ldr	r2, [r3, #24]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0210 	orr.w	r2, r2, #16
 80012c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fecb 	bl	8004064 <USB_ReadInterrupts>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80012d8:	f040 80a7 	bne.w	800142a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fed0 	bl	800408a <USB_ReadDevAllOutEpInterrupt>
 80012ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80012ec:	e099      	b.n	8001422 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 808e 	beq.w	8001416 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f002 fef4 	bl	80040f2 <USB_ReadDevOutEPInterrupt>
 800130a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00c      	beq.n	8001330 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	015a      	lsls	r2, r3, #5
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	4413      	add	r3, r2
 800131e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001322:	461a      	mov	r2, r3
 8001324:	2301      	movs	r3, #1
 8001326:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001328:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fea4 	bl	8002078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00c      	beq.n	8001354 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	015a      	lsls	r2, r3, #5
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	4413      	add	r3, r2
 8001342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001346:	461a      	mov	r2, r3
 8001348:	2308      	movs	r3, #8
 800134a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800134c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 ff7a 	bl	8002248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	2b00      	cmp	r3, #0
 800135c:	d008      	beq.n	8001370 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	015a      	lsls	r2, r3, #5
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	4413      	add	r3, r2
 8001366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800136a:	461a      	mov	r2, r3
 800136c:	2310      	movs	r3, #16
 800136e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d030      	beq.n	80013dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001382:	2b80      	cmp	r3, #128	@ 0x80
 8001384:	d109      	bne.n	800139a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001394:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001398:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800139a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800139c:	4613      	mov	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	3304      	adds	r3, #4
 80013ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d108      	bne.n	80013ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2200      	movs	r2, #0
 80013bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f005 fab5 	bl	8006934 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	015a      	lsls	r2, r3, #5
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013d6:	461a      	mov	r2, r3
 80013d8:	2302      	movs	r3, #2
 80013da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	2320      	movs	r3, #32
 80013f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800140e:	461a      	mov	r2, r3
 8001410:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001414:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	3301      	adds	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800141c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800141e:	085b      	lsrs	r3, r3, #1
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	f47f af62 	bne.w	80012ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f002 fe18 	bl	8004064 <USB_ReadInterrupts>
 8001434:	4603      	mov	r3, r0
 8001436:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800143a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800143e:	f040 80db 	bne.w	80015f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fe39 	bl	80040be <USB_ReadDevAllInEpInterrupt>
 800144c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001452:	e0cd      	b.n	80015f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80c2 	beq.w	80015e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fe5f 	bl	800412e <USB_ReadDevInEPInterrupt>
 8001470:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d057      	beq.n	800152c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	2201      	movs	r2, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	69f9      	ldr	r1, [r7, #28]
 8001498:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800149c:	4013      	ands	r3, r2
 800149e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	015a      	lsls	r2, r3, #5
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	4413      	add	r3, r2
 80014a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014ac:	461a      	mov	r2, r3
 80014ae:	2301      	movs	r3, #1
 80014b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	799b      	ldrb	r3, [r3, #6]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d132      	bne.n	8001520 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014be:	4613      	mov	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3320      	adds	r3, #32
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4403      	add	r3, r0
 80014da:	331c      	adds	r3, #28
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4419      	add	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4403      	add	r3, r0
 80014ee:	3320      	adds	r3, #32
 80014f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d113      	bne.n	8001520 <HAL_PCD_IRQHandler+0x3a2>
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	3324      	adds	r3, #36	@ 0x24
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d108      	bne.n	8001520 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001518:	461a      	mov	r2, r3
 800151a:	2101      	movs	r1, #1
 800151c:	f002 fe66 	bl	80041ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f005 f97f 	bl	800682a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001538:	015a      	lsls	r2, r3, #5
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	4413      	add	r3, r2
 800153e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001542:	461a      	mov	r2, r3
 8001544:	2308      	movs	r3, #8
 8001546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	015a      	lsls	r2, r3, #5
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	4413      	add	r3, r2
 800155a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800155e:	461a      	mov	r2, r3
 8001560:	2310      	movs	r3, #16
 8001562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001570:	015a      	lsls	r2, r3, #5
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	4413      	add	r3, r2
 8001576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800157a:	461a      	mov	r2, r3
 800157c:	2340      	movs	r3, #64	@ 0x40
 800157e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d023      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800158a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800158c:	6a38      	ldr	r0, [r7, #32]
 800158e:	f001 fe4d 	bl	800322c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	3310      	adds	r3, #16
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	3304      	adds	r3, #4
 80015a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	78db      	ldrb	r3, [r3, #3]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d108      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2200      	movs	r2, #0
 80015b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4619      	mov	r1, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f005 f9cc 	bl	8006958 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015cc:	461a      	mov	r2, r3
 80015ce:	2302      	movs	r3, #2
 80015d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 fcbd 	bl	8001f5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	3301      	adds	r3, #1
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f47f af2e 	bne.w	8001454 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fd31 	bl	8004064 <USB_ReadInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001608:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800160c:	d122      	bne.n	8001654 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001628:	2b01      	cmp	r3, #1
 800162a:	d108      	bne.n	800163e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001634:	2100      	movs	r1, #0
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fea4 	bl	8002384 <HAL_PCDEx_LPM_Callback>
 800163c:	e002      	b.n	8001644 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f005 f96a 	bl	8006918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fd03 	bl	8004064 <USB_ReadInterrupts>
 800165e:	4603      	mov	r3, r0
 8001660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001668:	d112      	bne.n	8001690 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f005 f926 	bl	80068cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800168e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fce5 	bl	8004064 <USB_ReadInterrupts>
 800169a:	4603      	mov	r3, r0
 800169c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016a4:	f040 80b7 	bne.w	8001816 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2110      	movs	r1, #16
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 fdb2 	bl	800322c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016cc:	e046      	b.n	800175c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d0:	015a      	lsls	r2, r3, #5
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	4413      	add	r3, r2
 80016d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016da:	461a      	mov	r2, r3
 80016dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f2:	0151      	lsls	r1, r2, #5
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	440a      	add	r2, r1
 80016f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80016fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001700:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001704:	015a      	lsls	r2, r3, #5
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	4413      	add	r3, r2
 800170a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800170e:	461a      	mov	r2, r3
 8001710:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001714:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001726:	0151      	lsls	r1, r2, #5
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	440a      	add	r2, r1
 800172c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001730:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001734:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001738:	015a      	lsls	r2, r3, #5
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	4413      	add	r3, r2
 800173e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001746:	0151      	lsls	r1, r2, #5
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	440a      	add	r2, r1
 800174c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001750:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001754:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001758:	3301      	adds	r3, #1
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	791b      	ldrb	r3, [r3, #4]
 8001760:	461a      	mov	r2, r3
 8001762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001764:	4293      	cmp	r3, r2
 8001766:	d3b2      	bcc.n	80016ce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001776:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800177a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7bdb      	ldrb	r3, [r3, #15]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d016      	beq.n	80017b2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800178a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001794:	f043 030b 	orr.w	r3, r3, #11
 8001798:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017aa:	f043 030b 	orr.w	r3, r3, #11
 80017ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b0:	e015      	b.n	80017de <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017c4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80017c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017d8:	f043 030b 	orr.w	r3, r3, #11
 80017dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80017f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001800:	461a      	mov	r2, r3
 8001802:	f002 fcf3 	bl	80041ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f002 fc22 	bl	8004064 <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800182a:	d123      	bne.n	8001874 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f002 fcb8 	bl	80041a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f001 fd6f 	bl	800331e <USB_GetDevSpeed>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681c      	ldr	r4, [r3, #0]
 800184c:	f001 fa0a 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8001850:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001856:	461a      	mov	r2, r3
 8001858:	4620      	mov	r0, r4
 800185a:	f001 fa73 	bl	8002d44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f005 f80b 	bl	800687a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001872:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f002 fbf3 	bl	8004064 <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b08      	cmp	r3, #8
 8001886:	d10a      	bne.n	800189e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f004 ffe8 	bl	800685e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f002 0208 	and.w	r2, r2, #8
 800189c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fbde 	bl	8004064 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ae:	2b80      	cmp	r3, #128	@ 0x80
 80018b0:	d123      	bne.n	80018fa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018be:	2301      	movs	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c2:	e014      	b.n	80018ee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4619      	mov	r1, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fb0a 	bl	8001efc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	461a      	mov	r2, r3
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d3e4      	bcc.n	80018c4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fbb0 	bl	8004064 <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800190a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800190e:	d13c      	bne.n	800198a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001910:	2301      	movs	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
 8001914:	e02b      	b.n	800196e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	3318      	adds	r3, #24
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d115      	bne.n	8001968 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800193c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800193e:	2b00      	cmp	r3, #0
 8001940:	da12      	bge.n	8001968 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	3317      	adds	r3, #23
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 faca 	bl	8001efc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	3301      	adds	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	791b      	ldrb	r3, [r3, #4]
 8001972:	461a      	mov	r2, r3
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	4293      	cmp	r3, r2
 8001978:	d3cd      	bcc.n	8001916 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001988:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f002 fb68 	bl	8004064 <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800199e:	d156      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a0:	2301      	movs	r3, #1
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a4:	e045      	b.n	8001a32 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ba:	4613      	mov	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d12e      	bne.n	8001a2c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	da2b      	bge.n	8001a2c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80019e0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d121      	bne.n	8001a2c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ec:	4613      	mov	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10a      	bne.n	8001a2c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a28:	6053      	str	r3, [r2, #4]
            break;
 8001a2a:	e008      	b.n	8001a3e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	3301      	adds	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	791b      	ldrb	r3, [r3, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d3b3      	bcc.n	80019a6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fb06 	bl	8004064 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a62:	d10a      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f004 ff89 	bl	800697c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 faf0 	bl	8004064 <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d115      	bne.n	8001aba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f004 ff79 	bl	8006998 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	e000      	b.n	8001aba <HAL_PCD_IRQHandler+0x93c>
      return;
 8001ab8:	bf00      	nop
    }
  }
}
 8001aba:	3734      	adds	r7, #52	@ 0x34
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd90      	pop	{r4, r7, pc}

08001ac0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_PCD_SetAddress+0x1a>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e012      	b.n	8001b00 <HAL_PCD_SetAddress+0x40>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fa4f 	bl	8003f94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4603      	mov	r3, r0
 8001b18:	70fb      	strb	r3, [r7, #3]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	803b      	strh	r3, [r7, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	da0f      	bge.n	8001b4e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	f003 020f 	and.w	r2, r3, #15
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	3310      	adds	r3, #16
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	3304      	adds	r3, #4
 8001b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	705a      	strb	r2, [r3, #1]
 8001b4c:	e00f      	b.n	8001b6e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 020f 	and.w	r2, r3, #15
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	3304      	adds	r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001b7a:	883b      	ldrh	r3, [r7, #0]
 8001b7c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	78ba      	ldrb	r2, [r7, #2]
 8001b88:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	785b      	ldrb	r3, [r3, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b9c:	78bb      	ldrb	r3, [r7, #2]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d102      	bne.n	8001ba8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_PCD_EP_Open+0xae>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e00e      	b.n	8001bd4 <HAL_PCD_EP_Open+0xcc>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68f9      	ldr	r1, [r7, #12]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 fbcf 	bl	8003368 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da0f      	bge.n	8001c10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	f003 020f 	and.w	r2, r3, #15
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	3310      	adds	r3, #16
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	705a      	strb	r2, [r3, #1]
 8001c0e:	e00f      	b.n	8001c30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f003 020f 	and.w	r2, r3, #15
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	3304      	adds	r3, #4
 8001c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_PCD_EP_Close+0x6e>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e00e      	b.n	8001c68 <HAL_PCD_EP_Close+0x8c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68f9      	ldr	r1, [r7, #12]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 fc0d 	bl	8003478 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	f003 020f 	and.w	r2, r3, #15
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4413      	add	r3, r2
 8001c96:	3304      	adds	r3, #4
 8001c98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	799b      	ldrb	r3, [r3, #6]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d102      	bne.n	8001ccc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	799b      	ldrb	r3, [r3, #6]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	f001 fcaa 	bl	8003630 <USB_EPStartXfer>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001d08:	681b      	ldr	r3, [r3, #0]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	460b      	mov	r3, r1
 8001d24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	3310      	adds	r3, #16
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2201      	movs	r2, #1
 8001d54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d56:	7afb      	ldrb	r3, [r7, #11]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	799b      	ldrb	r3, [r3, #6]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	799b      	ldrb	r3, [r3, #6]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	6979      	ldr	r1, [r7, #20]
 8001d7c:	f001 fc58 	bl	8003630 <USB_EPStartXfer>

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	7912      	ldrb	r2, [r2, #4]
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e04f      	b.n	8001e48 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	da0f      	bge.n	8001dd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	f003 020f 	and.w	r2, r3, #15
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	3310      	adds	r3, #16
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	705a      	strb	r2, [r3, #1]
 8001dce:	e00d      	b.n	8001dec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	3304      	adds	r3, #4
 8001de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_PCD_EP_SetStall+0x82>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e01d      	b.n	8001e48 <HAL_PCD_EP_SetStall+0xbe>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68f9      	ldr	r1, [r7, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f001 ffe6 	bl	8003dec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7999      	ldrb	r1, [r3, #6]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f002 f9d7 	bl	80041ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	7912      	ldrb	r2, [r2, #4]
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e042      	b.n	8001ef4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da0f      	bge.n	8001e96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	f003 020f 	and.w	r2, r3, #15
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	3310      	adds	r3, #16
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	705a      	strb	r2, [r3, #1]
 8001e94:	e00f      	b.n	8001eb6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	f003 020f 	and.w	r2, r3, #15
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_PCD_EP_ClrStall+0x86>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e00e      	b.n	8001ef4 <HAL_PCD_EP_ClrStall+0xa4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68f9      	ldr	r1, [r7, #12]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 ffef 	bl	8003ec8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	da0c      	bge.n	8001f2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 020f 	and.w	r2, r3, #15
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	3310      	adds	r3, #16
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	3304      	adds	r3, #4
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e00c      	b.n	8001f44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 020f 	and.w	r2, r3, #15
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	3304      	adds	r3, #4
 8001f42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 fe0e 	bl	8003b6c <USB_EPStopXfer>
 8001f50:	4603      	mov	r3, r0
 8001f52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f54:	7afb      	ldrb	r3, [r7, #11]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b08a      	sub	sp, #40	@ 0x28
 8001f62:	af02      	add	r7, sp, #8
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3310      	adds	r3, #16
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d901      	bls.n	8001f96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e06b      	b.n	800206e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d902      	bls.n	8001fb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fba:	e02a      	b.n	8002012 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d902      	bls.n	8001fd8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3303      	adds	r3, #3
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	68d9      	ldr	r1, [r3, #12]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6978      	ldr	r0, [r7, #20]
 8001ff6:	f001 fe63 	bl	8003cc0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	441a      	add	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	441a      	add	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	429a      	cmp	r2, r3
 8002026:	d809      	bhi.n	800203c <PCD_WriteEmptyTxFifo+0xde>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002030:	429a      	cmp	r2, r3
 8002032:	d203      	bcs.n	800203c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1bf      	bne.n	8001fbc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	429a      	cmp	r2, r3
 8002046:	d811      	bhi.n	800206c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	2201      	movs	r2, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800205c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	43db      	mvns	r3, r3
 8002062:	6939      	ldr	r1, [r7, #16]
 8002064:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002068:	4013      	ands	r3, r2
 800206a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	333c      	adds	r3, #60	@ 0x3c
 8002090:	3304      	adds	r3, #4
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	799b      	ldrb	r3, [r3, #6]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d17b      	bne.n	80021a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d015      	beq.n	80020e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4a61      	ldr	r2, [pc, #388]	@ (8002240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	f240 80b9 	bls.w	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80b3 	beq.w	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020da:	461a      	mov	r2, r3
 80020dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020e0:	6093      	str	r3, [r2, #8]
 80020e2:	e0a7      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020fa:	461a      	mov	r2, r3
 80020fc:	2320      	movs	r3, #32
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	e098      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 8093 	bne.w	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4a4b      	ldr	r2, [pc, #300]	@ (8002240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d90f      	bls.n	8002136 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800212c:	461a      	mov	r2, r3
 800212e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002132:	6093      	str	r3, [r2, #8]
 8002134:	e07e      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	0159      	lsls	r1, r3, #5
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	440b      	add	r3, r1
 8002158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d114      	bne.n	8002198 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002180:	461a      	mov	r2, r3
 8002182:	2101      	movs	r1, #1
 8002184:	f002 f832 	bl	80041ec <USB_EP0_OutStart>
 8002188:	e006      	b.n	8002198 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	441a      	add	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f004 fb28 	bl	80067f4 <HAL_PCD_DataOutStageCallback>
 80021a4:	e046      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	4a26      	ldr	r2, [pc, #152]	@ (8002244 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d124      	bne.n	80021f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021c4:	461a      	mov	r2, r3
 80021c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ca:	6093      	str	r3, [r2, #8]
 80021cc:	e032      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e4:	461a      	mov	r2, r3
 80021e6:	2320      	movs	r3, #32
 80021e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f004 faff 	bl	80067f4 <HAL_PCD_DataOutStageCallback>
 80021f6:	e01d      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002220:	461a      	mov	r2, r3
 8002222:	2100      	movs	r1, #0
 8002224:	f001 ffe2 	bl	80041ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f004 fae0 	bl	80067f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	4f54300a 	.word	0x4f54300a
 8002244:	4f54310a 	.word	0x4f54310a

08002248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	333c      	adds	r3, #60	@ 0x3c
 8002260:	3304      	adds	r3, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a15      	ldr	r2, [pc, #84]	@ (80022d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d90e      	bls.n	800229c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002294:	461a      	mov	r2, r3
 8002296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800229a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f004 fa97 	bl	80067d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d90c      	bls.n	80022c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	799b      	ldrb	r3, [r3, #6]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d108      	bne.n	80022c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022bc:	461a      	mov	r2, r3
 80022be:	2101      	movs	r1, #1
 80022c0:	f001 ff94 	bl	80041ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	4f54300a 	.word	0x4f54300a

080022d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
 80022e0:	4613      	mov	r3, r2
 80022e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022f2:	883b      	ldrh	r3, [r7, #0]
 80022f4:	0419      	lsls	r1, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002300:	e028      	b.n	8002354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4413      	add	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	e00d      	b.n	8002332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	3340      	adds	r3, #64	@ 0x40
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	4413      	add	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	3301      	adds	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	3b01      	subs	r3, #1
 8002338:	429a      	cmp	r2, r3
 800233a:	d3ec      	bcc.n	8002316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800233c:	883b      	ldrh	r3, [r7, #0]
 800233e:	0418      	lsls	r0, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	3b01      	subs	r3, #1
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	4302      	orrs	r2, r0
 800234c:	3340      	adds	r3, #64	@ 0x40
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e267      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d075      	beq.n	80024a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023ba:	4b88      	ldr	r3, [pc, #544]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d00c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c6:	4b85      	ldr	r3, [pc, #532]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d112      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d2:	4b82      	ldr	r3, [pc, #520]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023de:	d10b      	bne.n	80023f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	4b7e      	ldr	r3, [pc, #504]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05b      	beq.n	80024a4 <HAL_RCC_OscConfig+0x108>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d157      	bne.n	80024a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e242      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002400:	d106      	bne.n	8002410 <HAL_RCC_OscConfig+0x74>
 8002402:	4b76      	ldr	r3, [pc, #472]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a75      	ldr	r2, [pc, #468]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e01d      	b.n	800244c <HAL_RCC_OscConfig+0xb0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x98>
 800241a:	4b70      	ldr	r3, [pc, #448]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a6f      	ldr	r2, [pc, #444]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b6d      	ldr	r3, [pc, #436]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a6c      	ldr	r2, [pc, #432]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0xb0>
 8002434:	4b69      	ldr	r3, [pc, #420]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a68      	ldr	r2, [pc, #416]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 800243a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b66      	ldr	r3, [pc, #408]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a65      	ldr	r2, [pc, #404]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800244a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d013      	beq.n	800247c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fa3e 	bl	80008d4 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe fa3a 	bl	80008d4 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	@ 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e207      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b5b      	ldr	r3, [pc, #364]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0xc0>
 800247a:	e014      	b.n	80024a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fa2a 	bl	80008d4 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe fa26 	bl	80008d4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1f3      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	4b51      	ldr	r3, [pc, #324]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0xe8>
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d063      	beq.n	800257a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024b2:	4b4a      	ldr	r3, [pc, #296]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024be:	4b47      	ldr	r3, [pc, #284]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d11c      	bne.n	8002504 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ca:	4b44      	ldr	r3, [pc, #272]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d116      	bne.n	8002504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_RCC_OscConfig+0x152>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e1c7      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ee:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4937      	ldr	r1, [pc, #220]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	e03a      	b.n	800257a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250c:	4b34      	ldr	r3, [pc, #208]	@ (80025e0 <HAL_RCC_OscConfig+0x244>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe f9df 	bl	80008d4 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251a:	f7fe f9db 	bl	80008d4 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e1a8      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	4b2b      	ldr	r3, [pc, #172]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4925      	ldr	r1, [pc, #148]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
 800254c:	e015      	b.n	800257a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254e:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <HAL_RCC_OscConfig+0x244>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe f9be 	bl	80008d4 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255c:	f7fe f9ba 	bl	80008d4 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e187      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d036      	beq.n	80025f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258e:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <HAL_RCC_OscConfig+0x248>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe f99e 	bl	80008d4 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259c:	f7fe f99a 	bl	80008d4 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e167      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_RCC_OscConfig+0x240>)
 80025b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x200>
 80025ba:	e01b      	b.n	80025f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025bc:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <HAL_RCC_OscConfig+0x248>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7fe f987 	bl	80008d4 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	e00e      	b.n	80025e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ca:	f7fe f983 	bl	80008d4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d907      	bls.n	80025e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e150      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
 80025dc:	40023800 	.word	0x40023800
 80025e0:	42470000 	.word	0x42470000
 80025e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	4b88      	ldr	r3, [pc, #544]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80025ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ea      	bne.n	80025ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8097 	beq.w	8002730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002606:	4b81      	ldr	r3, [pc, #516]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b7d      	ldr	r3, [pc, #500]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a7c      	ldr	r2, [pc, #496]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b7a      	ldr	r3, [pc, #488]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b77      	ldr	r3, [pc, #476]	@ (8002810 <HAL_RCC_OscConfig+0x474>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d118      	bne.n	8002670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263e:	4b74      	ldr	r3, [pc, #464]	@ (8002810 <HAL_RCC_OscConfig+0x474>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a73      	ldr	r2, [pc, #460]	@ (8002810 <HAL_RCC_OscConfig+0x474>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264a:	f7fe f943 	bl	80008d4 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7fe f93f 	bl	80008d4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e10c      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	4b6a      	ldr	r3, [pc, #424]	@ (8002810 <HAL_RCC_OscConfig+0x474>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x2ea>
 8002678:	4b64      	ldr	r3, [pc, #400]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267c:	4a63      	ldr	r2, [pc, #396]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6713      	str	r3, [r2, #112]	@ 0x70
 8002684:	e01c      	b.n	80026c0 <HAL_RCC_OscConfig+0x324>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b05      	cmp	r3, #5
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x30c>
 800268e:	4b5f      	ldr	r3, [pc, #380]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002692:	4a5e      	ldr	r2, [pc, #376]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6713      	str	r3, [r2, #112]	@ 0x70
 800269a:	4b5c      	ldr	r3, [pc, #368]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269e:	4a5b      	ldr	r2, [pc, #364]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0x324>
 80026a8:	4b58      	ldr	r3, [pc, #352]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	4a57      	ldr	r2, [pc, #348]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b4:	4b55      	ldr	r3, [pc, #340]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b8:	4a54      	ldr	r2, [pc, #336]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026ba:	f023 0304 	bic.w	r3, r3, #4
 80026be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe f904 	bl	80008d4 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe f900 	bl	80008d4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e0cb      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e6:	4b49      	ldr	r3, [pc, #292]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ee      	beq.n	80026d0 <HAL_RCC_OscConfig+0x334>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7fe f8ee 	bl	80008d4 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe f8ea 	bl	80008d4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0b5      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002712:	4b3e      	ldr	r3, [pc, #248]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ee      	bne.n	80026fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4b39      	ldr	r3, [pc, #228]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	4a38      	ldr	r2, [pc, #224]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800272a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a1 	beq.w	800287c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800273a:	4b34      	ldr	r3, [pc, #208]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d05c      	beq.n	8002800 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d141      	bne.n	80027d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <HAL_RCC_OscConfig+0x478>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7fe f8be 	bl	80008d4 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe f8ba 	bl	80008d4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e087      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	4b27      	ldr	r3, [pc, #156]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	3b01      	subs	r3, #1
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	491b      	ldr	r1, [pc, #108]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_RCC_OscConfig+0x478>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe f893 	bl	80008d4 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b2:	f7fe f88f 	bl	80008d4 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e05c      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x416>
 80027d0:	e054      	b.n	800287c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_RCC_OscConfig+0x478>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe f87c 	bl	80008d4 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe f878 	bl	80008d4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e045      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_OscConfig+0x470>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x444>
 80027fe:	e03d      	b.n	800287c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e038      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
 800280c:	40023800 	.word	0x40023800
 8002810:	40007000 	.word	0x40007000
 8002814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002818:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <HAL_RCC_OscConfig+0x4ec>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d028      	beq.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d121      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d11a      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800284e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002850:	4293      	cmp	r3, r2
 8002852:	d111      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	3b01      	subs	r3, #1
 8002862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0cc      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a0:	4b68      	ldr	r3, [pc, #416]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d90c      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b65      	ldr	r3, [pc, #404]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b63      	ldr	r3, [pc, #396]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b8      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b59      	ldr	r3, [pc, #356]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a58      	ldr	r2, [pc, #352]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f8:	4b53      	ldr	r3, [pc, #332]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4a52      	ldr	r2, [pc, #328]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b50      	ldr	r3, [pc, #320]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	494d      	ldr	r1, [pc, #308]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d044      	beq.n	80029ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b47      	ldr	r3, [pc, #284]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d119      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d003      	beq.n	800294a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002946:	2b03      	cmp	r3, #3
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e06f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e067      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296a:	4b37      	ldr	r3, [pc, #220]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4934      	ldr	r1, [pc, #208]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	4313      	orrs	r3, r2
 800297a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800297c:	f7fd ffaa 	bl	80008d4 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	e00a      	b.n	800299a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f7fd ffa6 	bl	80008d4 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e04f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 020c 	and.w	r2, r3, #12
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1eb      	bne.n	8002984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ac:	4b25      	ldr	r3, [pc, #148]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d20c      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b22      	ldr	r3, [pc, #136]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b20      	ldr	r3, [pc, #128]	@ (8002a44 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e032      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4916      	ldr	r1, [pc, #88]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fe:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	490e      	ldr	r1, [pc, #56]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a12:	f000 f821 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	490a      	ldr	r1, [pc, #40]	@ (8002a4c <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	5ccb      	ldrb	r3, [r1, r3]
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	4a09      	ldr	r2, [pc, #36]	@ (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd ff0a 	bl	800084c <HAL_InitTick>

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023c00 	.word	0x40023c00
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	08006e14 	.word	0x08006e14
 8002a50:	20000004 	.word	0x20000004
 8002a54:	20000008 	.word	0x20000008

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a5c:	b094      	sub	sp, #80	@ 0x50
 8002a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a70:	4b79      	ldr	r3, [pc, #484]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d00d      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x40>
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	f200 80e1 	bhi.w	8002c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x34>
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a8a:	e0db      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b73      	ldr	r3, [pc, #460]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a90:	e0db      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a92:	4b73      	ldr	r3, [pc, #460]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a96:	e0d8      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a98:	4b6f      	ldr	r3, [pc, #444]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aa0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d063      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aae:	4b6a      	ldr	r3, [pc, #424]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	099b      	lsrs	r3, r3, #6
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ab8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002aca:	4622      	mov	r2, r4
 8002acc:	462b      	mov	r3, r5
 8002ace:	f04f 0000 	mov.w	r0, #0
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	0159      	lsls	r1, r3, #5
 8002ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002adc:	0150      	lsls	r0, r2, #5
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	1a51      	subs	r1, r2, r1
 8002ae6:	6139      	str	r1, [r7, #16]
 8002ae8:	4629      	mov	r1, r5
 8002aea:	eb63 0301 	sbc.w	r3, r3, r1
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002afc:	4659      	mov	r1, fp
 8002afe:	018b      	lsls	r3, r1, #6
 8002b00:	4651      	mov	r1, sl
 8002b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b06:	4651      	mov	r1, sl
 8002b08:	018a      	lsls	r2, r1, #6
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b10:	4659      	mov	r1, fp
 8002b12:	eb63 0901 	sbc.w	r9, r3, r1
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b2a:	4690      	mov	r8, r2
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	eb18 0303 	adds.w	r3, r8, r3
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	462b      	mov	r3, r5
 8002b38:	eb49 0303 	adc.w	r3, r9, r3
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	024b      	lsls	r3, r1, #9
 8002b4e:	4621      	mov	r1, r4
 8002b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b54:	4621      	mov	r1, r4
 8002b56:	024a      	lsls	r2, r1, #9
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5e:	2200      	movs	r2, #0
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b68:	f7fd fb36 	bl	80001d8 <__aeabi_uldivmod>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4613      	mov	r3, r2
 8002b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b74:	e058      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b38      	ldr	r3, [pc, #224]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	4611      	mov	r1, r2
 8002b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b90:	4642      	mov	r2, r8
 8002b92:	464b      	mov	r3, r9
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	0159      	lsls	r1, r3, #5
 8002b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba2:	0150      	lsls	r0, r2, #5
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4641      	mov	r1, r8
 8002baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bae:	4649      	mov	r1, r9
 8002bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	00eb      	lsls	r3, r5, #3
 8002bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bde:	00e2      	lsls	r2, r4, #3
 8002be0:	4614      	mov	r4, r2
 8002be2:	461d      	mov	r5, r3
 8002be4:	4643      	mov	r3, r8
 8002be6:	18e3      	adds	r3, r4, r3
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	464b      	mov	r3, r9
 8002bec:	eb45 0303 	adc.w	r3, r5, r3
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bfe:	4629      	mov	r1, r5
 8002c00:	028b      	lsls	r3, r1, #10
 8002c02:	4621      	mov	r1, r4
 8002c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c08:	4621      	mov	r1, r4
 8002c0a:	028a      	lsls	r2, r1, #10
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c12:	2200      	movs	r2, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	61fa      	str	r2, [r7, #28]
 8002c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c1c:	f7fd fadc 	bl	80001d8 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c28:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c42:	e002      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3750      	adds	r7, #80	@ 0x50
 8002c50:	46bd      	mov	sp, r7
 8002c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	007a1200 	.word	0x007a1200

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	@ (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000004 	.word	0x20000004

08002c7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	f107 001c 	add.w	r0, r7, #28
 8002c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d123      	bne.n	8002cde <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d105      	bne.n	8002cd2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f001 fae8 	bl	80042a8 <USB_CoreReset>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	e01b      	b.n	8002d16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f001 fadc 	bl	80042a8 <USB_CoreReset>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cf4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d08:	e005      	b.n	8002d16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d16:	7fbb      	ldrb	r3, [r7, #30]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d10b      	bne.n	8002d34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f043 0206 	orr.w	r2, r3, #6
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d40:	b004      	add	sp, #16
 8002d42:	4770      	bx	lr

08002d44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d165      	bne.n	8002e24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4a41      	ldr	r2, [pc, #260]	@ (8002e60 <USB_SetTurnaroundTime+0x11c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d906      	bls.n	8002d6e <USB_SetTurnaroundTime+0x2a>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4a40      	ldr	r2, [pc, #256]	@ (8002e64 <USB_SetTurnaroundTime+0x120>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d202      	bcs.n	8002d6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d68:	230f      	movs	r3, #15
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e062      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4a3c      	ldr	r2, [pc, #240]	@ (8002e64 <USB_SetTurnaroundTime+0x120>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d306      	bcc.n	8002d84 <USB_SetTurnaroundTime+0x40>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4a3b      	ldr	r2, [pc, #236]	@ (8002e68 <USB_SetTurnaroundTime+0x124>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d202      	bcs.n	8002d84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d7e:	230e      	movs	r3, #14
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e057      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4a38      	ldr	r2, [pc, #224]	@ (8002e68 <USB_SetTurnaroundTime+0x124>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d306      	bcc.n	8002d9a <USB_SetTurnaroundTime+0x56>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4a37      	ldr	r2, [pc, #220]	@ (8002e6c <USB_SetTurnaroundTime+0x128>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d202      	bcs.n	8002d9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d94:	230d      	movs	r3, #13
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e04c      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4a33      	ldr	r2, [pc, #204]	@ (8002e6c <USB_SetTurnaroundTime+0x128>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d306      	bcc.n	8002db0 <USB_SetTurnaroundTime+0x6c>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4a32      	ldr	r2, [pc, #200]	@ (8002e70 <USB_SetTurnaroundTime+0x12c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002daa:	230c      	movs	r3, #12
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e041      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4a2f      	ldr	r2, [pc, #188]	@ (8002e70 <USB_SetTurnaroundTime+0x12c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d906      	bls.n	8002dc6 <USB_SetTurnaroundTime+0x82>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4a2e      	ldr	r2, [pc, #184]	@ (8002e74 <USB_SetTurnaroundTime+0x130>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d802      	bhi.n	8002dc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002dc0:	230b      	movs	r3, #11
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e036      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8002e74 <USB_SetTurnaroundTime+0x130>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d906      	bls.n	8002ddc <USB_SetTurnaroundTime+0x98>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4a29      	ldr	r2, [pc, #164]	@ (8002e78 <USB_SetTurnaroundTime+0x134>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d802      	bhi.n	8002ddc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	e02b      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a26      	ldr	r2, [pc, #152]	@ (8002e78 <USB_SetTurnaroundTime+0x134>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d906      	bls.n	8002df2 <USB_SetTurnaroundTime+0xae>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a25      	ldr	r2, [pc, #148]	@ (8002e7c <USB_SetTurnaroundTime+0x138>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d202      	bcs.n	8002df2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002dec:	2309      	movs	r3, #9
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e020      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4a21      	ldr	r2, [pc, #132]	@ (8002e7c <USB_SetTurnaroundTime+0x138>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d306      	bcc.n	8002e08 <USB_SetTurnaroundTime+0xc4>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4a20      	ldr	r2, [pc, #128]	@ (8002e80 <USB_SetTurnaroundTime+0x13c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d802      	bhi.n	8002e08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e02:	2308      	movs	r3, #8
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	e015      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e80 <USB_SetTurnaroundTime+0x13c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d906      	bls.n	8002e1e <USB_SetTurnaroundTime+0xda>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a1c      	ldr	r2, [pc, #112]	@ (8002e84 <USB_SetTurnaroundTime+0x140>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d202      	bcs.n	8002e1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e18:	2307      	movs	r3, #7
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e00a      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e1e:	2306      	movs	r3, #6
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e007      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e2a:	2309      	movs	r3, #9
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e001      	b.n	8002e34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e30:	2309      	movs	r3, #9
 8002e32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	029b      	lsls	r3, r3, #10
 8002e48:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	00d8acbf 	.word	0x00d8acbf
 8002e64:	00e4e1c0 	.word	0x00e4e1c0
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	01067380 	.word	0x01067380
 8002e70:	011a499f 	.word	0x011a499f
 8002e74:	01312cff 	.word	0x01312cff
 8002e78:	014ca43f 	.word	0x014ca43f
 8002e7c:	016e3600 	.word	0x016e3600
 8002e80:	01a6ab1f 	.word	0x01a6ab1f
 8002e84:	01e84800 	.word	0x01e84800

08002e88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 0201 	bic.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d115      	bne.n	8002f1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002efa:	200a      	movs	r0, #10
 8002efc:	f7fd fcf6 	bl	80008ec <HAL_Delay>
      ms += 10U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	330a      	adds	r3, #10
 8002f04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f001 f93f 	bl	800418a <USB_GetMode>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d01e      	beq.n	8002f50 <USB_SetCurrentMode+0x84>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f16:	d9f0      	bls.n	8002efa <USB_SetCurrentMode+0x2e>
 8002f18:	e01a      	b.n	8002f50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d115      	bne.n	8002f4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f2c:	200a      	movs	r0, #10
 8002f2e:	f7fd fcdd 	bl	80008ec <HAL_Delay>
      ms += 10U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	330a      	adds	r3, #10
 8002f36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 f926 	bl	800418a <USB_GetMode>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <USB_SetCurrentMode+0x84>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f48:	d9f0      	bls.n	8002f2c <USB_SetCurrentMode+0x60>
 8002f4a:	e001      	b.n	8002f50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e005      	b.n	8002f5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2bc8      	cmp	r3, #200	@ 0xc8
 8002f54:	d101      	bne.n	8002f5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f64:	b084      	sub	sp, #16
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e009      	b.n	8002f98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	3340      	adds	r3, #64	@ 0x40
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	2200      	movs	r2, #0
 8002f90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	3301      	adds	r3, #1
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b0e      	cmp	r3, #14
 8002f9c:	d9f2      	bls.n	8002f84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11c      	bne.n	8002fe0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fde:	e00b      	b.n	8002ff8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002ffe:	461a      	mov	r2, r3
 8003000:	2300      	movs	r3, #0
 8003002:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003004:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003008:	2b01      	cmp	r3, #1
 800300a:	d10d      	bne.n	8003028 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800300c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003010:	2b00      	cmp	r3, #0
 8003012:	d104      	bne.n	800301e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003014:	2100      	movs	r1, #0
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f968 	bl	80032ec <USB_SetDevSpeed>
 800301c:	e008      	b.n	8003030 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800301e:	2101      	movs	r1, #1
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f963 	bl	80032ec <USB_SetDevSpeed>
 8003026:	e003      	b.n	8003030 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003028:	2103      	movs	r1, #3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f95e 	bl	80032ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003030:	2110      	movs	r1, #16
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8fa 	bl	800322c <USB_FlushTxFifo>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f924 	bl	8003290 <USB_FlushRxFifo>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003058:	461a      	mov	r2, r3
 800305a:	2300      	movs	r3, #0
 800305c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003064:	461a      	mov	r2, r3
 8003066:	2300      	movs	r3, #0
 8003068:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003070:	461a      	mov	r2, r3
 8003072:	2300      	movs	r3, #0
 8003074:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	e043      	b.n	8003104 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800308e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003092:	d118      	bne.n	80030c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030a6:	461a      	mov	r2, r3
 80030a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e013      	b.n	80030d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030bc:	461a      	mov	r2, r3
 80030be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e008      	b.n	80030d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d2:	461a      	mov	r2, r3
 80030d4:	2300      	movs	r3, #0
 80030d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030e4:	461a      	mov	r2, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030f6:	461a      	mov	r2, r3
 80030f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	3301      	adds	r3, #1
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003108:	461a      	mov	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4293      	cmp	r3, r2
 800310e:	d3b5      	bcc.n	800307c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	e043      	b.n	800319e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800312c:	d118      	bne.n	8003160 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003140:	461a      	mov	r2, r3
 8003142:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	e013      	b.n	8003172 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003156:	461a      	mov	r2, r3
 8003158:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e008      	b.n	8003172 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800316c:	461a      	mov	r2, r3
 800316e:	2300      	movs	r3, #0
 8003170:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800317e:	461a      	mov	r2, r3
 8003180:	2300      	movs	r3, #0
 8003182:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003190:	461a      	mov	r2, r3
 8003192:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003196:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	3301      	adds	r3, #1
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031a2:	461a      	mov	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d3b5      	bcc.n	8003116 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80031ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f043 0210 	orr.w	r2, r3, #16
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <USB_DevInit+0x2c4>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f043 0208 	orr.w	r2, r3, #8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003200:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003204:	2b01      	cmp	r3, #1
 8003206:	d107      	bne.n	8003218 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003218:	7dfb      	ldrb	r3, [r7, #23]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003224:	b004      	add	sp, #16
 8003226:	4770      	bx	lr
 8003228:	803c3800 	.word	0x803c3800

0800322c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3301      	adds	r3, #1
 800323e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003246:	d901      	bls.n	800324c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e01b      	b.n	8003284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	daf2      	bge.n	800323a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	019b      	lsls	r3, r3, #6
 800325c:	f043 0220 	orr.w	r2, r3, #32
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3301      	adds	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003270:	d901      	bls.n	8003276 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e006      	b.n	8003284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b20      	cmp	r3, #32
 8003280:	d0f0      	beq.n	8003264 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3301      	adds	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032a8:	d901      	bls.n	80032ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e018      	b.n	80032e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	daf2      	bge.n	800329c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2210      	movs	r2, #16
 80032be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3301      	adds	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032cc:	d901      	bls.n	80032d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e006      	b.n	80032e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d0f0      	beq.n	80032c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	68f9      	ldr	r1, [r7, #12]
 8003308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800331e:	b480      	push	{r7}
 8003320:	b087      	sub	sp, #28
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0306 	and.w	r3, r3, #6
 8003336:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d102      	bne.n	8003344 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
 8003342:	e00a      	b.n	800335a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d002      	beq.n	8003350 <USB_GetDevSpeed+0x32>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d102      	bne.n	8003356 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003350:	2302      	movs	r3, #2
 8003352:	75fb      	strb	r3, [r7, #23]
 8003354:	e001      	b.n	800335a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003356:	230f      	movs	r3, #15
 8003358:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800335a:	7dfb      	ldrb	r3, [r7, #23]
}
 800335c:	4618      	mov	r0, r3
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	785b      	ldrb	r3, [r3, #1]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d13a      	bne.n	80033fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	2101      	movs	r1, #1
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	b29b      	uxth	r3, r3
 800339c:	68f9      	ldr	r1, [r7, #12]
 800339e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d155      	bne.n	8003468 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	791b      	ldrb	r3, [r3, #4]
 80033d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	059b      	lsls	r3, r3, #22
 80033de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033e0:	4313      	orrs	r3, r2
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	0151      	lsls	r1, r2, #5
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	440a      	add	r2, r1
 80033ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	e036      	b.n	8003468 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	2101      	movs	r1, #1
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003418:	4313      	orrs	r3, r2
 800341a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11a      	bne.n	8003468 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	791b      	ldrb	r3, [r3, #4]
 800344c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800344e:	430b      	orrs	r3, r1
 8003450:	4313      	orrs	r3, r2
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	0151      	lsls	r1, r2, #5
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	440a      	add	r2, r1
 800345a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003466:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d161      	bne.n	8003558 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034aa:	d11f      	bne.n	80034ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	0151      	lsls	r1, r2, #5
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	440a      	add	r2, r1
 80034c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	0151      	lsls	r1, r2, #5
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	440a      	add	r2, r1
 80034e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	b29b      	uxth	r3, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800350c:	4013      	ands	r3, r2
 800350e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003530:	4013      	ands	r3, r2
 8003532:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	0159      	lsls	r1, r3, #5
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	440b      	add	r3, r1
 800354a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800354e:	4619      	mov	r1, r3
 8003550:	4b35      	ldr	r3, [pc, #212]	@ (8003628 <USB_DeactivateEndpoint+0x1b0>)
 8003552:	4013      	ands	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
 8003556:	e060      	b.n	800361a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800356a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800356e:	d11f      	bne.n	80035b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	0151      	lsls	r1, r2, #5
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	440a      	add	r2, r1
 8003586:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800358a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800358e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	2101      	movs	r1, #1
 80035c2:	fa01 f303 	lsl.w	r3, r1, r3
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	43db      	mvns	r3, r3
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035d0:	4013      	ands	r3, r2
 80035d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	43db      	mvns	r3, r3
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035f4:	4013      	ands	r3, r2
 80035f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	0159      	lsls	r1, r3, #5
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	440b      	add	r3, r1
 800360e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003612:	4619      	mov	r1, r3
 8003614:	4b05      	ldr	r3, [pc, #20]	@ (800362c <USB_DeactivateEndpoint+0x1b4>)
 8003616:	4013      	ands	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	ec337800 	.word	0xec337800
 800362c:	eff37800 	.word	0xeff37800

08003630 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	@ 0x28
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	4613      	mov	r3, r2
 800363c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	2b01      	cmp	r3, #1
 800364e:	f040 817f 	bne.w	8003950 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d132      	bne.n	80036c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	0151      	lsls	r1, r2, #5
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	440a      	add	r2, r1
 8003670:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003674:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003678:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800367c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	0151      	lsls	r1, r2, #5
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	440a      	add	r2, r1
 8003694:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003698:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800369c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	0151      	lsls	r1, r2, #5
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	440a      	add	r2, r1
 80036b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036b8:	0cdb      	lsrs	r3, r3, #19
 80036ba:	04db      	lsls	r3, r3, #19
 80036bc:	6113      	str	r3, [r2, #16]
 80036be:	e097      	b.n	80037f0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	0151      	lsls	r1, r2, #5
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	440a      	add	r2, r1
 80036d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036da:	0cdb      	lsrs	r3, r3, #19
 80036dc:	04db      	lsls	r3, r3, #19
 80036de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	0151      	lsls	r1, r2, #5
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	440a      	add	r2, r1
 80036f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80036fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003702:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11a      	bne.n	8003740 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d903      	bls.n	800371e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	0151      	lsls	r1, r2, #5
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	440a      	add	r2, r1
 8003734:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003738:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800373c:	6113      	str	r3, [r2, #16]
 800373e:	e044      	b.n	80037ca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4413      	add	r3, r2
 800374a:	1e5a      	subs	r2, r3, #1
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	8afb      	ldrh	r3, [r7, #22]
 8003766:	04d9      	lsls	r1, r3, #19
 8003768:	4ba4      	ldr	r3, [pc, #656]	@ (80039fc <USB_EPStartXfer+0x3cc>)
 800376a:	400b      	ands	r3, r1
 800376c:	69b9      	ldr	r1, [r7, #24]
 800376e:	0148      	lsls	r0, r1, #5
 8003770:	69f9      	ldr	r1, [r7, #28]
 8003772:	4401      	add	r1, r0
 8003774:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003778:	4313      	orrs	r3, r2
 800377a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	791b      	ldrb	r3, [r3, #4]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d122      	bne.n	80037ca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	440a      	add	r2, r1
 800379a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800379e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80037a2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	8afb      	ldrh	r3, [r7, #22]
 80037b4:	075b      	lsls	r3, r3, #29
 80037b6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80037ba:	69b9      	ldr	r1, [r7, #24]
 80037bc:	0148      	lsls	r0, r1, #5
 80037be:	69f9      	ldr	r1, [r7, #28]
 80037c0:	4401      	add	r1, r0
 80037c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80037c6:	4313      	orrs	r3, r2
 80037c8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e0:	69b9      	ldr	r1, [r7, #24]
 80037e2:	0148      	lsls	r0, r1, #5
 80037e4:	69f9      	ldr	r1, [r7, #28]
 80037e6:	4401      	add	r1, r0
 80037e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80037ec:	4313      	orrs	r3, r2
 80037ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d14b      	bne.n	800388e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	791b      	ldrb	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d128      	bne.n	800386c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d110      	bne.n	800384c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	440a      	add	r2, r1
 8003840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003844:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e00f      	b.n	800386c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	0151      	lsls	r1, r2, #5
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	440a      	add	r2, r1
 8003862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800386a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	0151      	lsls	r1, r2, #5
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	440a      	add	r2, r1
 8003882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003886:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e166      	b.n	8003b5c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	0151      	lsls	r1, r2, #5
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	440a      	add	r2, r1
 80038a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80038ac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	791b      	ldrb	r3, [r3, #4]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d015      	beq.n	80038e2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 814e 	beq.w	8003b5c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	2101      	movs	r1, #1
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	69f9      	ldr	r1, [r7, #28]
 80038d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038dc:	4313      	orrs	r3, r2
 80038de:	634b      	str	r3, [r1, #52]	@ 0x34
 80038e0:	e13c      	b.n	8003b5c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d110      	bne.n	8003914 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	0151      	lsls	r1, r2, #5
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	440a      	add	r2, r1
 8003908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800390c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e00f      	b.n	8003934 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	0151      	lsls	r1, r2, #5
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	440a      	add	r2, r1
 800392a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800392e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003932:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	68d9      	ldr	r1, [r3, #12]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	b298      	uxth	r0, r3
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	4603      	mov	r3, r0
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f9b9 	bl	8003cc0 <USB_WritePacket>
 800394e:	e105      	b.n	8003b5c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	440a      	add	r2, r1
 8003966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800396a:	0cdb      	lsrs	r3, r3, #19
 800396c:	04db      	lsls	r3, r3, #19
 800396e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	440a      	add	r2, r1
 8003986:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800398a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800398e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003992:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d132      	bne.n	8003a00 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c8:	69b9      	ldr	r1, [r7, #24]
 80039ca:	0148      	lsls	r0, r1, #5
 80039cc:	69f9      	ldr	r1, [r7, #28]
 80039ce:	4401      	add	r1, r0
 80039d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80039d4:	4313      	orrs	r3, r2
 80039d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039f6:	6113      	str	r3, [r2, #16]
 80039f8:	e062      	b.n	8003ac0 <USB_EPStartXfer+0x490>
 80039fa:	bf00      	nop
 80039fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d123      	bne.n	8003a50 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1e:	69b9      	ldr	r1, [r7, #24]
 8003a20:	0148      	lsls	r0, r1, #5
 8003a22:	69f9      	ldr	r1, [r7, #28]
 8003a24:	4401      	add	r1, r0
 8003a26:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	0151      	lsls	r1, r2, #5
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	440a      	add	r2, r1
 8003a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003a4c:	6113      	str	r3, [r2, #16]
 8003a4e:	e037      	b.n	8003ac0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4413      	add	r3, r2
 8003a5a:	1e5a      	subs	r2, r3, #1
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	8afa      	ldrh	r2, [r7, #22]
 8003a6c:	fb03 f202 	mul.w	r2, r3, r2
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	8afb      	ldrh	r3, [r7, #22]
 8003a84:	04d9      	lsls	r1, r3, #19
 8003a86:	4b38      	ldr	r3, [pc, #224]	@ (8003b68 <USB_EPStartXfer+0x538>)
 8003a88:	400b      	ands	r3, r1
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	0148      	lsls	r0, r1, #5
 8003a8e:	69f9      	ldr	r1, [r7, #28]
 8003a90:	4401      	add	r1, r0
 8003a92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a96:	4313      	orrs	r3, r2
 8003a98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	0148      	lsls	r0, r1, #5
 8003ab4:	69f9      	ldr	r1, [r7, #28]
 8003ab6:	4401      	add	r1, r0
 8003ab8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003abc:	4313      	orrs	r3, r2
 8003abe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10d      	bne.n	8003ae2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	68d9      	ldr	r1, [r3, #12]
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ade:	460a      	mov	r2, r1
 8003ae0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	791b      	ldrb	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d128      	bne.n	8003b3c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d110      	bne.n	8003b1c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e00f      	b.n	8003b3c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	0151      	lsls	r1, r2, #5
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	440a      	add	r2, r1
 8003b32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	0151      	lsls	r1, r2, #5
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	440a      	add	r2, r1
 8003b52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003b5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	1ff80000 	.word	0x1ff80000

08003b6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	785b      	ldrb	r3, [r3, #1]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d14a      	bne.n	8003c20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ba2:	f040 8086 	bne.w	8003cb2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	7812      	ldrb	r2, [r2, #0]
 8003bba:	0151      	lsls	r1, r2, #5
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	440a      	add	r2, r1
 8003bc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bc8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	7812      	ldrb	r2, [r2, #0]
 8003bde:	0151      	lsls	r1, r2, #5
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	440a      	add	r2, r1
 8003be4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003be8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d902      	bls.n	8003c04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
          break;
 8003c02:	e056      	b.n	8003cb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c1c:	d0e7      	beq.n	8003bee <USB_EPStopXfer+0x82>
 8003c1e:	e048      	b.n	8003cb2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c38:	d13b      	bne.n	8003cb2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c58:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	7812      	ldrb	r2, [r2, #0]
 8003c72:	0151      	lsls	r1, r2, #5
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	440a      	add	r2, r1
 8003c78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d902      	bls.n	8003c98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
          break;
 8003c96:	e00c      	b.n	8003cb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cb0:	d0e7      	beq.n	8003c82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	460b      	mov	r3, r1
 8003cd0:	71fb      	strb	r3, [r7, #7]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003cde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d123      	bne.n	8003d2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ce6:	88bb      	ldrh	r3, [r7, #4]
 8003ce8:	3303      	adds	r3, #3
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e018      	b.n	8003d26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	031a      	lsls	r2, r3, #12
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d00:	461a      	mov	r2, r3
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	3301      	adds	r3, #1
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d3e2      	bcc.n	8003cf4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3724      	adds	r7, #36	@ 0x24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b08b      	sub	sp, #44	@ 0x2c
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	089b      	lsrs	r3, r3, #2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	623b      	str	r3, [r7, #32]
 8003d66:	e014      	b.n	8003d92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	3301      	adds	r3, #1
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	3301      	adds	r3, #1
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	3301      	adds	r3, #1
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	6a3a      	ldr	r2, [r7, #32]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d3e6      	bcc.n	8003d68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d9a:	8bfb      	ldrh	r3, [r7, #30]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01e      	beq.n	8003dde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003daa:	461a      	mov	r2, r3
 8003dac:	f107 0310 	add.w	r3, r7, #16
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	701a      	strb	r2, [r3, #0]
      i++;
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	623b      	str	r3, [r7, #32]
      pDest++;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	3301      	adds	r3, #1
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003dd2:	8bfb      	ldrh	r3, [r7, #30]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003dd8:	8bfb      	ldrh	r3, [r7, #30]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ea      	bne.n	8003db4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	372c      	adds	r7, #44	@ 0x2c
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d12c      	bne.n	8003e62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	db12      	blt.n	8003e40 <USB_EPSetStall+0x54>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00f      	beq.n	8003e40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	0151      	lsls	r1, r2, #5
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	440a      	add	r2, r1
 8003e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	e02b      	b.n	8003eba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	db12      	blt.n	8003e9a <USB_EPSetStall+0xae>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00f      	beq.n	8003e9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	0151      	lsls	r1, r2, #5
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	440a      	add	r2, r1
 8003e90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003eb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003eb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d128      	bne.n	8003f36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003efe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	791b      	ldrb	r3, [r3, #4]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d003      	beq.n	8003f14 <USB_EPClearStall+0x4c>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	791b      	ldrb	r3, [r3, #4]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d138      	bne.n	8003f86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	0151      	lsls	r1, r2, #5
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	440a      	add	r2, r1
 8003f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	e027      	b.n	8003f86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	0151      	lsls	r1, r2, #5
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	440a      	add	r2, r1
 8003f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	791b      	ldrb	r3, [r3, #4]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d003      	beq.n	8003f66 <USB_EPClearStall+0x9e>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	791b      	ldrb	r3, [r3, #4]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d10f      	bne.n	8003f86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fb2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003fb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003fc8:	68f9      	ldr	r1, [r7, #12]
 8003fca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003ffa:	f023 0303 	bic.w	r3, r3, #3
 8003ffe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800400e:	f023 0302 	bic.w	r3, r3, #2
 8004012:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800403c:	f023 0303 	bic.w	r3, r3, #3
 8004040:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4013      	ands	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800407c:	68fb      	ldr	r3, [r7, #12]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	0c1b      	lsrs	r3, r3, #16
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	b29b      	uxth	r3, r3
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4013      	ands	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004120:	68bb      	ldr	r3, [r7, #8]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800412e:	b480      	push	{r7}
 8004130:	b087      	sub	sp, #28
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800414e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004150:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	01db      	lsls	r3, r3, #7
 8004160:	b2db      	uxtb	r3, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4013      	ands	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800417c:	68bb      	ldr	r3, [r7, #8]
}
 800417e:	4618      	mov	r0, r3
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0301 	and.w	r3, r3, #1
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80041c4:	f023 0307 	bic.w	r3, r3, #7
 80041c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	460b      	mov	r3, r1
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	333c      	adds	r3, #60	@ 0x3c
 8004202:	3304      	adds	r3, #4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4a26      	ldr	r2, [pc, #152]	@ (80042a4 <USB_EP0_OutStart+0xb8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d90a      	bls.n	8004226 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800421c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004220:	d101      	bne.n	8004226 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e037      	b.n	8004296 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800422c:	461a      	mov	r2, r3
 800422e:	2300      	movs	r3, #0
 8004230:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004240:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004244:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004254:	f043 0318 	orr.w	r3, r3, #24
 8004258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004268:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800426c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800426e:	7afb      	ldrb	r3, [r7, #11]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d10f      	bne.n	8004294 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800428e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004292:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	4f54300a 	.word	0x4f54300a

080042a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3301      	adds	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042c0:	d901      	bls.n	80042c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e01b      	b.n	80042fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	daf2      	bge.n	80042b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f043 0201 	orr.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3301      	adds	r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042ea:	d901      	bls.n	80042f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e006      	b.n	80042fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d0f0      	beq.n	80042de <USB_CoreReset+0x36>

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004318:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800431c:	f002 fcd4 	bl	8006cc8 <USBD_static_malloc>
 8004320:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	32b0      	adds	r2, #176	@ 0xb0
 8004332:	2100      	movs	r1, #0
 8004334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004338:	2302      	movs	r3, #2
 800433a:	e0d4      	b.n	80044e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800433c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004340:	2100      	movs	r1, #0
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f002 fd04 	bl	8006d50 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	32b0      	adds	r2, #176	@ 0xb0
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	32b0      	adds	r2, #176	@ 0xb0
 8004362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7c1b      	ldrb	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d138      	bne.n	80043e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004374:	4b5e      	ldr	r3, [pc, #376]	@ (80044f0 <USBD_CDC_Init+0x1e4>)
 8004376:	7819      	ldrb	r1, [r3, #0]
 8004378:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800437c:	2202      	movs	r2, #2
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f002 fb7f 	bl	8006a82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004384:	4b5a      	ldr	r3, [pc, #360]	@ (80044f0 <USBD_CDC_Init+0x1e4>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3324      	adds	r3, #36	@ 0x24
 800439a:	2201      	movs	r2, #1
 800439c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800439e:	4b55      	ldr	r3, [pc, #340]	@ (80044f4 <USBD_CDC_Init+0x1e8>)
 80043a0:	7819      	ldrb	r1, [r3, #0]
 80043a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043a6:	2202      	movs	r2, #2
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f002 fb6a 	bl	8006a82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80043ae:	4b51      	ldr	r3, [pc, #324]	@ (80044f4 <USBD_CDC_Init+0x1e8>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	f003 020f 	and.w	r2, r3, #15
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80043c6:	2201      	movs	r2, #1
 80043c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80043ca:	4b4b      	ldr	r3, [pc, #300]	@ (80044f8 <USBD_CDC_Init+0x1ec>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	3326      	adds	r3, #38	@ 0x26
 80043e0:	2210      	movs	r2, #16
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	e035      	b.n	8004452 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80043e6:	4b42      	ldr	r3, [pc, #264]	@ (80044f0 <USBD_CDC_Init+0x1e4>)
 80043e8:	7819      	ldrb	r1, [r3, #0]
 80043ea:	2340      	movs	r3, #64	@ 0x40
 80043ec:	2202      	movs	r2, #2
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f002 fb47 	bl	8006a82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80043f4:	4b3e      	ldr	r3, [pc, #248]	@ (80044f0 <USBD_CDC_Init+0x1e4>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f003 020f 	and.w	r2, r3, #15
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3324      	adds	r3, #36	@ 0x24
 800440a:	2201      	movs	r2, #1
 800440c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800440e:	4b39      	ldr	r3, [pc, #228]	@ (80044f4 <USBD_CDC_Init+0x1e8>)
 8004410:	7819      	ldrb	r1, [r3, #0]
 8004412:	2340      	movs	r3, #64	@ 0x40
 8004414:	2202      	movs	r2, #2
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f002 fb33 	bl	8006a82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800441c:	4b35      	ldr	r3, [pc, #212]	@ (80044f4 <USBD_CDC_Init+0x1e8>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f003 020f 	and.w	r2, r3, #15
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004434:	2201      	movs	r2, #1
 8004436:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004438:	4b2f      	ldr	r3, [pc, #188]	@ (80044f8 <USBD_CDC_Init+0x1ec>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	f003 020f 	and.w	r2, r3, #15
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3326      	adds	r3, #38	@ 0x26
 800444e:	2210      	movs	r2, #16
 8004450:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004452:	4b29      	ldr	r3, [pc, #164]	@ (80044f8 <USBD_CDC_Init+0x1ec>)
 8004454:	7819      	ldrb	r1, [r3, #0]
 8004456:	2308      	movs	r3, #8
 8004458:	2203      	movs	r2, #3
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f002 fb11 	bl	8006a82 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004460:	4b25      	ldr	r3, [pc, #148]	@ (80044f8 <USBD_CDC_Init+0x1ec>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	f003 020f 	and.w	r2, r3, #15
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	3324      	adds	r3, #36	@ 0x24
 8004476:	2201      	movs	r2, #1
 8004478:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	33b0      	adds	r3, #176	@ 0xb0
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80044b0:	2302      	movs	r3, #2
 80044b2:	e018      	b.n	80044e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	7c1b      	ldrb	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80044bc:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <USBD_CDC_Init+0x1e8>)
 80044be:	7819      	ldrb	r1, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80044c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f002 fbc8 	bl	8006c60 <USBD_LL_PrepareReceive>
 80044d0:	e008      	b.n	80044e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80044d2:	4b08      	ldr	r3, [pc, #32]	@ (80044f4 <USBD_CDC_Init+0x1e8>)
 80044d4:	7819      	ldrb	r1, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80044dc:	2340      	movs	r3, #64	@ 0x40
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f002 fbbe 	bl	8006c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000097 	.word	0x20000097
 80044f4:	20000098 	.word	0x20000098
 80044f8:	20000099 	.word	0x20000099

080044fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004508:	4b3a      	ldr	r3, [pc, #232]	@ (80045f4 <USBD_CDC_DeInit+0xf8>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	4619      	mov	r1, r3
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f002 fadd 	bl	8006ace <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004514:	4b37      	ldr	r3, [pc, #220]	@ (80045f4 <USBD_CDC_DeInit+0xf8>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f003 020f 	and.w	r2, r3, #15
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3324      	adds	r3, #36	@ 0x24
 800452a:	2200      	movs	r2, #0
 800452c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800452e:	4b32      	ldr	r3, [pc, #200]	@ (80045f8 <USBD_CDC_DeInit+0xfc>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	4619      	mov	r1, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f002 faca 	bl	8006ace <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800453a:	4b2f      	ldr	r3, [pc, #188]	@ (80045f8 <USBD_CDC_DeInit+0xfc>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	f003 020f 	and.w	r2, r3, #15
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004552:	2200      	movs	r2, #0
 8004554:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004556:	4b29      	ldr	r3, [pc, #164]	@ (80045fc <USBD_CDC_DeInit+0x100>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	4619      	mov	r1, r3
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f002 fab6 	bl	8006ace <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004562:	4b26      	ldr	r3, [pc, #152]	@ (80045fc <USBD_CDC_DeInit+0x100>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3324      	adds	r3, #36	@ 0x24
 8004578:	2200      	movs	r2, #0
 800457a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800457c:	4b1f      	ldr	r3, [pc, #124]	@ (80045fc <USBD_CDC_DeInit+0x100>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	f003 020f 	and.w	r2, r3, #15
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	3326      	adds	r3, #38	@ 0x26
 8004592:	2200      	movs	r2, #0
 8004594:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	32b0      	adds	r2, #176	@ 0xb0
 80045a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01f      	beq.n	80045e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	33b0      	adds	r3, #176	@ 0xb0
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	32b0      	adds	r2, #176	@ 0xb0
 80045c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f002 fb8a 	bl	8006ce4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	32b0      	adds	r2, #176	@ 0xb0
 80045da:	2100      	movs	r1, #0
 80045dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000097 	.word	0x20000097
 80045f8:	20000098 	.word	0x20000098
 80045fc:	20000099 	.word	0x20000099

08004600 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	32b0      	adds	r2, #176	@ 0xb0
 8004614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004618:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800462c:	2303      	movs	r3, #3
 800462e:	e0bf      	b.n	80047b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004638:	2b00      	cmp	r3, #0
 800463a:	d050      	beq.n	80046de <USBD_CDC_Setup+0xde>
 800463c:	2b20      	cmp	r3, #32
 800463e:	f040 80af 	bne.w	80047a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	88db      	ldrh	r3, [r3, #6]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d03a      	beq.n	80046c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b25b      	sxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	da1b      	bge.n	800468c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	33b0      	adds	r3, #176	@ 0xb0
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800466a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	88d2      	ldrh	r2, [r2, #6]
 8004670:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	88db      	ldrh	r3, [r3, #6]
 8004676:	2b07      	cmp	r3, #7
 8004678:	bf28      	it	cs
 800467a:	2307      	movcs	r3, #7
 800467c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	89fa      	ldrh	r2, [r7, #14]
 8004682:	4619      	mov	r1, r3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f001 fd93 	bl	80061b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800468a:	e090      	b.n	80047ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	785a      	ldrb	r2, [r3, #1]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	88db      	ldrh	r3, [r3, #6]
 800469a:	2b3f      	cmp	r3, #63	@ 0x3f
 800469c:	d803      	bhi.n	80046a6 <USBD_CDC_Setup+0xa6>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	88db      	ldrh	r3, [r3, #6]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	e000      	b.n	80046a8 <USBD_CDC_Setup+0xa8>
 80046a6:	2240      	movs	r2, #64	@ 0x40
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80046ae:	6939      	ldr	r1, [r7, #16]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80046b6:	461a      	mov	r2, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 fda5 	bl	8006208 <USBD_CtlPrepareRx>
      break;
 80046be:	e076      	b.n	80047ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	33b0      	adds	r3, #176	@ 0xb0
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	7850      	ldrb	r0, [r2, #1]
 80046d6:	2200      	movs	r2, #0
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	4798      	blx	r3
      break;
 80046dc:	e067      	b.n	80047ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	2b0b      	cmp	r3, #11
 80046e4:	d851      	bhi.n	800478a <USBD_CDC_Setup+0x18a>
 80046e6:	a201      	add	r2, pc, #4	@ (adr r2, 80046ec <USBD_CDC_Setup+0xec>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	0800471d 	.word	0x0800471d
 80046f0:	08004799 	.word	0x08004799
 80046f4:	0800478b 	.word	0x0800478b
 80046f8:	0800478b 	.word	0x0800478b
 80046fc:	0800478b 	.word	0x0800478b
 8004700:	0800478b 	.word	0x0800478b
 8004704:	0800478b 	.word	0x0800478b
 8004708:	0800478b 	.word	0x0800478b
 800470c:	0800478b 	.word	0x0800478b
 8004710:	0800478b 	.word	0x0800478b
 8004714:	08004747 	.word	0x08004747
 8004718:	08004771 	.word	0x08004771
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b03      	cmp	r3, #3
 8004726:	d107      	bne.n	8004738 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004728:	f107 030a 	add.w	r3, r7, #10
 800472c:	2202      	movs	r2, #2
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f001 fd3d 	bl	80061b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004736:	e032      	b.n	800479e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f001 fcbb 	bl	80060b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004740:	2303      	movs	r3, #3
 8004742:	75fb      	strb	r3, [r7, #23]
          break;
 8004744:	e02b      	b.n	800479e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b03      	cmp	r3, #3
 8004750:	d107      	bne.n	8004762 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004752:	f107 030d 	add.w	r3, r7, #13
 8004756:	2201      	movs	r2, #1
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f001 fd28 	bl	80061b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004760:	e01d      	b.n	800479e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004762:	6839      	ldr	r1, [r7, #0]
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f001 fca6 	bl	80060b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800476a:	2303      	movs	r3, #3
 800476c:	75fb      	strb	r3, [r7, #23]
          break;
 800476e:	e016      	b.n	800479e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b03      	cmp	r3, #3
 800477a:	d00f      	beq.n	800479c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 fc99 	bl	80060b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004784:	2303      	movs	r3, #3
 8004786:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004788:	e008      	b.n	800479c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f001 fc92 	bl	80060b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004792:	2303      	movs	r3, #3
 8004794:	75fb      	strb	r3, [r7, #23]
          break;
 8004796:	e002      	b.n	800479e <USBD_CDC_Setup+0x19e>
          break;
 8004798:	bf00      	nop
 800479a:	e008      	b.n	80047ae <USBD_CDC_Setup+0x1ae>
          break;
 800479c:	bf00      	nop
      }
      break;
 800479e:	e006      	b.n	80047ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f001 fc87 	bl	80060b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80047a8:	2303      	movs	r3, #3
 80047aa:	75fb      	strb	r3, [r7, #23]
      break;
 80047ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80047ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	32b0      	adds	r2, #176	@ 0xb0
 80047d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80047de:	2303      	movs	r3, #3
 80047e0:	e065      	b.n	80048ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	32b0      	adds	r2, #176	@ 0xb0
 80047ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	3318      	adds	r3, #24
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d02f      	beq.n	800486c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	f003 020f 	and.w	r2, r3, #15
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	3318      	adds	r3, #24
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	f003 010f 	and.w	r1, r3, #15
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	460b      	mov	r3, r1
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4403      	add	r3, r0
 8004834:	331c      	adds	r3, #28
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	fbb2 f1f3 	udiv	r1, r2, r3
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004842:	2b00      	cmp	r3, #0
 8004844:	d112      	bne.n	800486c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	f003 020f 	and.w	r2, r3, #15
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	3318      	adds	r3, #24
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800485e:	78f9      	ldrb	r1, [r7, #3]
 8004860:	2300      	movs	r3, #0
 8004862:	2200      	movs	r2, #0
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f002 f9da 	bl	8006c1e <USBD_LL_Transmit>
 800486a:	e01f      	b.n	80048ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2200      	movs	r2, #0
 8004870:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	33b0      	adds	r3, #176	@ 0xb0
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d010      	beq.n	80048ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	33b0      	adds	r3, #176	@ 0xb0
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	460b      	mov	r3, r1
 80048c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	32b0      	adds	r2, #176	@ 0xb0
 80048cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	32b0      	adds	r2, #176	@ 0xb0
 80048dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e01a      	b.n	800491e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f002 f9d8 	bl	8006ca2 <USBD_LL_GetRxDataSize>
 80048f2:	4602      	mov	r2, r0
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	33b0      	adds	r3, #176	@ 0xb0
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004918:	4611      	mov	r1, r2
 800491a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	32b0      	adds	r2, #176	@ 0xb0
 8004938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004944:	2303      	movs	r3, #3
 8004946:	e024      	b.n	8004992 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	33b0      	adds	r3, #176	@ 0xb0
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d019      	beq.n	8004990 <USBD_CDC_EP0_RxReady+0x6a>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004962:	2bff      	cmp	r3, #255	@ 0xff
 8004964:	d014      	beq.n	8004990 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	33b0      	adds	r3, #176	@ 0xb0
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800497e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004986:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	22ff      	movs	r2, #255	@ 0xff
 800498c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80049a4:	2182      	movs	r1, #130	@ 0x82
 80049a6:	4818      	ldr	r0, [pc, #96]	@ (8004a08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80049a8:	f000 fd4f 	bl	800544a <USBD_GetEpDesc>
 80049ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80049ae:	2101      	movs	r1, #1
 80049b0:	4815      	ldr	r0, [pc, #84]	@ (8004a08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80049b2:	f000 fd4a 	bl	800544a <USBD_GetEpDesc>
 80049b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80049b8:	2181      	movs	r1, #129	@ 0x81
 80049ba:	4813      	ldr	r0, [pc, #76]	@ (8004a08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80049bc:	f000 fd45 	bl	800544a <USBD_GetEpDesc>
 80049c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2210      	movs	r2, #16
 80049cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d006      	beq.n	80049e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049dc:	711a      	strb	r2, [r3, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d006      	beq.n	80049f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049f0:	711a      	strb	r2, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2243      	movs	r2, #67	@ 0x43
 80049fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80049fc:	4b02      	ldr	r3, [pc, #8]	@ (8004a08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000054 	.word	0x20000054

08004a0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a14:	2182      	movs	r1, #130	@ 0x82
 8004a16:	4818      	ldr	r0, [pc, #96]	@ (8004a78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004a18:	f000 fd17 	bl	800544a <USBD_GetEpDesc>
 8004a1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a1e:	2101      	movs	r1, #1
 8004a20:	4815      	ldr	r0, [pc, #84]	@ (8004a78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004a22:	f000 fd12 	bl	800544a <USBD_GetEpDesc>
 8004a26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a28:	2181      	movs	r1, #129	@ 0x81
 8004a2a:	4813      	ldr	r0, [pc, #76]	@ (8004a78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004a2c:	f000 fd0d 	bl	800544a <USBD_GetEpDesc>
 8004a30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d006      	beq.n	8004a52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2200      	movs	r2, #0
 8004a48:	711a      	strb	r2, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f042 0202 	orr.w	r2, r2, #2
 8004a50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d006      	beq.n	8004a66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	711a      	strb	r2, [r3, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f042 0202 	orr.w	r2, r2, #2
 8004a64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2243      	movs	r2, #67	@ 0x43
 8004a6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a6c:	4b02      	ldr	r3, [pc, #8]	@ (8004a78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000054 	.word	0x20000054

08004a7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004a84:	2182      	movs	r1, #130	@ 0x82
 8004a86:	4818      	ldr	r0, [pc, #96]	@ (8004ae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a88:	f000 fcdf 	bl	800544a <USBD_GetEpDesc>
 8004a8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4815      	ldr	r0, [pc, #84]	@ (8004ae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a92:	f000 fcda 	bl	800544a <USBD_GetEpDesc>
 8004a96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004a98:	2181      	movs	r1, #129	@ 0x81
 8004a9a:	4813      	ldr	r0, [pc, #76]	@ (8004ae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004a9c:	f000 fcd5 	bl	800544a <USBD_GetEpDesc>
 8004aa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2210      	movs	r2, #16
 8004aac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d006      	beq.n	8004ac2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004abc:	711a      	strb	r2, [r3, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d006      	beq.n	8004ad6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ad0:	711a      	strb	r2, [r3, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2243      	movs	r2, #67	@ 0x43
 8004ada:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004adc:	4b02      	ldr	r3, [pc, #8]	@ (8004ae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000054 	.word	0x20000054

08004aec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	220a      	movs	r2, #10
 8004af8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004afa:	4b03      	ldr	r3, [pc, #12]	@ (8004b08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000010 	.word	0x20000010

08004b0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e009      	b.n	8004b34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	33b0      	adds	r3, #176	@ 0xb0
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	32b0      	adds	r2, #176	@ 0xb0
 8004b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e008      	b.n	8004b78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	32b0      	adds	r2, #176	@ 0xb0
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e004      	b.n	8004bb2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	32b0      	adds	r2, #176	@ 0xb0
 8004bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e025      	b.n	8004c32 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d11f      	bne.n	8004c30 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004bf8:	4b10      	ldr	r3, [pc, #64]	@ (8004c3c <USBD_CDC_TransmitPacket+0x7c>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f003 020f 	and.w	r2, r3, #15
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4403      	add	r3, r0
 8004c12:	3318      	adds	r3, #24
 8004c14:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004c16:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <USBD_CDC_TransmitPacket+0x7c>)
 8004c18:	7819      	ldrb	r1, [r3, #0]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f001 fff9 	bl	8006c1e <USBD_LL_Transmit>

    ret = USBD_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000097 	.word	0x20000097

08004c40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	32b0      	adds	r2, #176	@ 0xb0
 8004c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	32b0      	adds	r2, #176	@ 0xb0
 8004c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e018      	b.n	8004ca0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	7c1b      	ldrb	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca8 <USBD_CDC_ReceivePacket+0x68>)
 8004c78:	7819      	ldrb	r1, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f001 ffeb 	bl	8006c60 <USBD_LL_PrepareReceive>
 8004c8a:	e008      	b.n	8004c9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <USBD_CDC_ReceivePacket+0x68>)
 8004c8e:	7819      	ldrb	r1, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c96:	2340      	movs	r3, #64	@ 0x40
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f001 ffe1 	bl	8006c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000098 	.word	0x20000098

08004cac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e01f      	b.n	8004d04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	79fa      	ldrb	r2, [r7, #7]
 8004cf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f001 fe5b 	bl	80069b4 <USBD_LL_Init>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e025      	b.n	8004d70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	32ae      	adds	r2, #174	@ 0xae
 8004d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00f      	beq.n	8004d60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	32ae      	adds	r2, #174	@ 0xae
 8004d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	f107 020e 	add.w	r2, r7, #14
 8004d54:	4610      	mov	r0, r2
 8004d56:	4798      	blx	r3
 8004d58:	4602      	mov	r2, r0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f001 fe63 	bl	8006a4c <USBD_LL_Start>
 8004d86:	4603      	mov	r3, r0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d009      	beq.n	8004dd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	4611      	mov	r1, r2
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	460b      	mov	r3, r1
 8004de8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004e04:	2303      	movs	r3, #3
 8004e06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 f90c 	bl	8006042 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d01a      	beq.n	8004e84 <USBD_LL_SetupStage+0x72>
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d822      	bhi.n	8004e98 <USBD_LL_SetupStage+0x86>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <USBD_LL_SetupStage+0x4a>
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d00a      	beq.n	8004e70 <USBD_LL_SetupStage+0x5e>
 8004e5a:	e01d      	b.n	8004e98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fb63 	bl	8005530 <USBD_StdDevReq>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6e:	e020      	b.n	8004eb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fbcb 	bl	8005614 <USBD_StdItfReq>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	73fb      	strb	r3, [r7, #15]
      break;
 8004e82:	e016      	b.n	8004eb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fc2d 	bl	80056ec <USBD_StdEPReq>
 8004e92:	4603      	mov	r3, r0
 8004e94:	73fb      	strb	r3, [r7, #15]
      break;
 8004e96:	e00c      	b.n	8004eb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004e9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 fe30 	bl	8006b0c <USBD_LL_StallEP>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb0:	bf00      	nop
  }

  return ret;
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004ece:	7afb      	ldrb	r3, [r7, #11]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d16e      	bne.n	8004fb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004eda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	f040 8098 	bne.w	8005018 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d913      	bls.n	8004f1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	1ad2      	subs	r2, r2, r3
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	bf28      	it	cs
 8004f0e:	4613      	movcs	r3, r2
 8004f10:	461a      	mov	r2, r3
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f001 f994 	bl	8006242 <USBD_CtlContinueRx>
 8004f1a:	e07d      	b.n	8005018 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d014      	beq.n	8004f54 <USBD_LL_DataOutStage+0x98>
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d81d      	bhi.n	8004f6a <USBD_LL_DataOutStage+0xae>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <USBD_LL_DataOutStage+0x7c>
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d003      	beq.n	8004f3e <USBD_LL_DataOutStage+0x82>
 8004f36:	e018      	b.n	8004f6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	75bb      	strb	r3, [r7, #22]
            break;
 8004f3c:	e018      	b.n	8004f70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	4619      	mov	r1, r3
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fa64 	bl	8005416 <USBD_CoreFindIF>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	75bb      	strb	r3, [r7, #22]
            break;
 8004f52:	e00d      	b.n	8004f70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fa66 	bl	8005430 <USBD_CoreFindEP>
 8004f64:	4603      	mov	r3, r0
 8004f66:	75bb      	strb	r3, [r7, #22]
            break;
 8004f68:	e002      	b.n	8004f70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	75bb      	strb	r3, [r7, #22]
            break;
 8004f6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004f70:	7dbb      	ldrb	r3, [r7, #22]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d119      	bne.n	8004faa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d113      	bne.n	8004faa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004f82:	7dba      	ldrb	r2, [r7, #22]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	32ae      	adds	r2, #174	@ 0xae
 8004f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004f92:	7dba      	ldrb	r2, [r7, #22]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004f9a:	7dba      	ldrb	r2, [r7, #22]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	32ae      	adds	r2, #174	@ 0xae
 8004fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f001 f95a 	bl	8006264 <USBD_CtlSendStatus>
 8004fb0:	e032      	b.n	8005018 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004fb2:	7afb      	ldrb	r3, [r7, #11]
 8004fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	4619      	mov	r1, r3
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fa37 	bl	8005430 <USBD_CoreFindEP>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004fc6:	7dbb      	ldrb	r3, [r7, #22]
 8004fc8:	2bff      	cmp	r3, #255	@ 0xff
 8004fca:	d025      	beq.n	8005018 <USBD_LL_DataOutStage+0x15c>
 8004fcc:	7dbb      	ldrb	r3, [r7, #22]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d122      	bne.n	8005018 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d117      	bne.n	800500e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004fde:	7dba      	ldrb	r2, [r7, #22]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	32ae      	adds	r2, #174	@ 0xae
 8004fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00f      	beq.n	800500e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004fee:	7dba      	ldrb	r2, [r7, #22]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004ff6:	7dba      	ldrb	r2, [r7, #22]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	32ae      	adds	r2, #174	@ 0xae
 8004ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	7afa      	ldrb	r2, [r7, #11]
 8005004:	4611      	mov	r1, r2
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	4798      	blx	r3
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	e000      	b.n	800501a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b086      	sub	sp, #24
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	460b      	mov	r3, r1
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005030:	7afb      	ldrb	r3, [r7, #11]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d16f      	bne.n	8005116 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3314      	adds	r3, #20
 800503a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005042:	2b02      	cmp	r3, #2
 8005044:	d15a      	bne.n	80050fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	429a      	cmp	r2, r3
 8005050:	d914      	bls.n	800507c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	1ad2      	subs	r2, r2, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	461a      	mov	r2, r3
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f001 f8bc 	bl	80061e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800506e:	2300      	movs	r3, #0
 8005070:	2200      	movs	r2, #0
 8005072:	2100      	movs	r1, #0
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f001 fdf3 	bl	8006c60 <USBD_LL_PrepareReceive>
 800507a:	e03f      	b.n	80050fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	429a      	cmp	r2, r3
 8005086:	d11c      	bne.n	80050c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005090:	429a      	cmp	r2, r3
 8005092:	d316      	bcc.n	80050c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800509e:	429a      	cmp	r2, r3
 80050a0:	d20f      	bcs.n	80050c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2100      	movs	r1, #0
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f001 f89d 	bl	80061e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050b4:	2300      	movs	r3, #0
 80050b6:	2200      	movs	r2, #0
 80050b8:	2100      	movs	r1, #0
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f001 fdd0 	bl	8006c60 <USBD_LL_PrepareReceive>
 80050c0:	e01c      	b.n	80050fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d10f      	bne.n	80050ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80050ee:	2180      	movs	r1, #128	@ 0x80
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f001 fd0b 	bl	8006b0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f001 f8c7 	bl	800628a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d03a      	beq.n	800517c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff fe42 	bl	8004d90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005114:	e032      	b.n	800517c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005116:	7afb      	ldrb	r3, [r7, #11]
 8005118:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800511c:	b2db      	uxtb	r3, r3
 800511e:	4619      	mov	r1, r3
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f985 	bl	8005430 <USBD_CoreFindEP>
 8005126:	4603      	mov	r3, r0
 8005128:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	2bff      	cmp	r3, #255	@ 0xff
 800512e:	d025      	beq.n	800517c <USBD_LL_DataInStage+0x15a>
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d122      	bne.n	800517c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b03      	cmp	r3, #3
 8005140:	d11c      	bne.n	800517c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005142:	7dfa      	ldrb	r2, [r7, #23]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	32ae      	adds	r2, #174	@ 0xae
 8005148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d014      	beq.n	800517c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005152:	7dfa      	ldrb	r2, [r7, #23]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800515a:	7dfa      	ldrb	r2, [r7, #23]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	32ae      	adds	r2, #174	@ 0xae
 8005160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	7afa      	ldrb	r2, [r7, #11]
 8005168:	4611      	mov	r1, r2
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	4798      	blx	r3
 800516e:	4603      	mov	r3, r0
 8005170:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005172:	7dbb      	ldrb	r3, [r7, #22]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005178:	7dbb      	ldrb	r3, [r7, #22]
 800517a:	e000      	b.n	800517e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d014      	beq.n	80051ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00e      	beq.n	80051ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6852      	ldr	r2, [r2, #4]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	4611      	mov	r1, r2
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80051e8:	2303      	movs	r3, #3
 80051ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80051ec:	2340      	movs	r3, #64	@ 0x40
 80051ee:	2200      	movs	r2, #0
 80051f0:	2100      	movs	r1, #0
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f001 fc45 	bl	8006a82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2240      	movs	r2, #64	@ 0x40
 8005204:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005208:	2340      	movs	r3, #64	@ 0x40
 800520a:	2200      	movs	r2, #0
 800520c:	2180      	movs	r1, #128	@ 0x80
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f001 fc37 	bl	8006a82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2240      	movs	r2, #64	@ 0x40
 800521e:	621a      	str	r2, [r3, #32]

  return ret;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b04      	cmp	r3, #4
 800525c:	d006      	beq.n	800526c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005264:	b2da      	uxtb	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2204      	movs	r2, #4
 8005270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b04      	cmp	r3, #4
 8005294:	d106      	bne.n	80052a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800529c:	b2da      	uxtb	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d110      	bne.n	80052e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	32ae      	adds	r2, #174	@ 0xae
 8005308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005310:	2303      	movs	r3, #3
 8005312:	e01c      	b.n	800534e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b03      	cmp	r3, #3
 800531e:	d115      	bne.n	800534c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	32ae      	adds	r2, #174	@ 0xae
 800532a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	32ae      	adds	r2, #174	@ 0xae
 800533e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	78fa      	ldrb	r2, [r7, #3]
 8005346:	4611      	mov	r1, r2
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	32ae      	adds	r2, #174	@ 0xae
 800536c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005374:	2303      	movs	r3, #3
 8005376:	e01c      	b.n	80053b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b03      	cmp	r3, #3
 8005382:	d115      	bne.n	80053b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	32ae      	adds	r2, #174	@ 0xae
 800538e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	32ae      	adds	r2, #174	@ 0xae
 80053a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	4611      	mov	r1, r2
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00e      	beq.n	800540c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6852      	ldr	r2, [r2, #4]
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	4611      	mov	r1, r2
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005408:	2303      	movs	r3, #3
 800540a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005422:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800543c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b086      	sub	sp, #24
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	885b      	ldrh	r3, [r3, #2]
 8005466:	b29b      	uxth	r3, r3
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	7812      	ldrb	r2, [r2, #0]
 800546c:	4293      	cmp	r3, r2
 800546e:	d91f      	bls.n	80054b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005476:	e013      	b.n	80054a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005478:	f107 030a 	add.w	r3, r7, #10
 800547c:	4619      	mov	r1, r3
 800547e:	6978      	ldr	r0, [r7, #20]
 8005480:	f000 f81b 	bl	80054ba <USBD_GetNextDesc>
 8005484:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b05      	cmp	r3, #5
 800548c:	d108      	bne.n	80054a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	789b      	ldrb	r3, [r3, #2]
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	429a      	cmp	r2, r3
 800549a:	d008      	beq.n	80054ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	885b      	ldrh	r3, [r3, #2]
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	897b      	ldrh	r3, [r7, #10]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d8e5      	bhi.n	8005478 <USBD_GetEpDesc+0x2e>
 80054ac:	e000      	b.n	80054b0 <USBD_GetEpDesc+0x66>
          break;
 80054ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80054b0:	693b      	ldr	r3, [r7, #16]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	7812      	ldrb	r2, [r2, #0]
 80054d0:	4413      	add	r3, r2
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4413      	add	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80054e4:	68fb      	ldr	r3, [r7, #12]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b087      	sub	sp, #28
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	3301      	adds	r3, #1
 8005508:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005510:	8a3b      	ldrh	r3, [r7, #16]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	b21a      	sxth	r2, r3
 8005516:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800551a:	4313      	orrs	r3, r2
 800551c:	b21b      	sxth	r3, r3
 800551e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005520:	89fb      	ldrh	r3, [r7, #14]
}
 8005522:	4618      	mov	r0, r3
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005546:	2b40      	cmp	r3, #64	@ 0x40
 8005548:	d005      	beq.n	8005556 <USBD_StdDevReq+0x26>
 800554a:	2b40      	cmp	r3, #64	@ 0x40
 800554c:	d857      	bhi.n	80055fe <USBD_StdDevReq+0xce>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00f      	beq.n	8005572 <USBD_StdDevReq+0x42>
 8005552:	2b20      	cmp	r3, #32
 8005554:	d153      	bne.n	80055fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	32ae      	adds	r2, #174	@ 0xae
 8005560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	4798      	blx	r3
 800556c:	4603      	mov	r3, r0
 800556e:	73fb      	strb	r3, [r7, #15]
      break;
 8005570:	e04a      	b.n	8005608 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	785b      	ldrb	r3, [r3, #1]
 8005576:	2b09      	cmp	r3, #9
 8005578:	d83b      	bhi.n	80055f2 <USBD_StdDevReq+0xc2>
 800557a:	a201      	add	r2, pc, #4	@ (adr r2, 8005580 <USBD_StdDevReq+0x50>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	080055d5 	.word	0x080055d5
 8005584:	080055e9 	.word	0x080055e9
 8005588:	080055f3 	.word	0x080055f3
 800558c:	080055df 	.word	0x080055df
 8005590:	080055f3 	.word	0x080055f3
 8005594:	080055b3 	.word	0x080055b3
 8005598:	080055a9 	.word	0x080055a9
 800559c:	080055f3 	.word	0x080055f3
 80055a0:	080055cb 	.word	0x080055cb
 80055a4:	080055bd 	.word	0x080055bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa3c 	bl	8005a28 <USBD_GetDescriptor>
          break;
 80055b0:	e024      	b.n	80055fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fba1 	bl	8005cfc <USBD_SetAddress>
          break;
 80055ba:	e01f      	b.n	80055fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fbe0 	bl	8005d84 <USBD_SetConfig>
 80055c4:	4603      	mov	r3, r0
 80055c6:	73fb      	strb	r3, [r7, #15]
          break;
 80055c8:	e018      	b.n	80055fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fc83 	bl	8005ed8 <USBD_GetConfig>
          break;
 80055d2:	e013      	b.n	80055fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fcb4 	bl	8005f44 <USBD_GetStatus>
          break;
 80055dc:	e00e      	b.n	80055fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fce3 	bl	8005fac <USBD_SetFeature>
          break;
 80055e6:	e009      	b.n	80055fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fd07 	bl	8005ffe <USBD_ClrFeature>
          break;
 80055f0:	e004      	b.n	80055fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fd5e 	bl	80060b6 <USBD_CtlError>
          break;
 80055fa:	bf00      	nop
      }
      break;
 80055fc:	e004      	b.n	8005608 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fd58 	bl	80060b6 <USBD_CtlError>
      break;
 8005606:	bf00      	nop
  }

  return ret;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop

08005614 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800562a:	2b40      	cmp	r3, #64	@ 0x40
 800562c:	d005      	beq.n	800563a <USBD_StdItfReq+0x26>
 800562e:	2b40      	cmp	r3, #64	@ 0x40
 8005630:	d852      	bhi.n	80056d8 <USBD_StdItfReq+0xc4>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <USBD_StdItfReq+0x26>
 8005636:	2b20      	cmp	r3, #32
 8005638:	d14e      	bne.n	80056d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005640:	b2db      	uxtb	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	2b02      	cmp	r3, #2
 8005646:	d840      	bhi.n	80056ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	889b      	ldrh	r3, [r3, #4]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b01      	cmp	r3, #1
 8005650:	d836      	bhi.n	80056c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	889b      	ldrh	r3, [r3, #4]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff fedb 	bl	8005416 <USBD_CoreFindIF>
 8005660:	4603      	mov	r3, r0
 8005662:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005664:	7bbb      	ldrb	r3, [r7, #14]
 8005666:	2bff      	cmp	r3, #255	@ 0xff
 8005668:	d01d      	beq.n	80056a6 <USBD_StdItfReq+0x92>
 800566a:	7bbb      	ldrb	r3, [r7, #14]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d11a      	bne.n	80056a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005670:	7bba      	ldrb	r2, [r7, #14]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	32ae      	adds	r2, #174	@ 0xae
 8005676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00f      	beq.n	80056a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005680:	7bba      	ldrb	r2, [r7, #14]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005688:	7bba      	ldrb	r2, [r7, #14]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	32ae      	adds	r2, #174	@ 0xae
 800568e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
 800569a:	4603      	mov	r3, r0
 800569c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800569e:	e004      	b.n	80056aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80056a0:	2303      	movs	r3, #3
 80056a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80056a4:	e001      	b.n	80056aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80056a6:	2303      	movs	r3, #3
 80056a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	88db      	ldrh	r3, [r3, #6]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d110      	bne.n	80056d4 <USBD_StdItfReq+0xc0>
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10d      	bne.n	80056d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fdd3 	bl	8006264 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056be:	e009      	b.n	80056d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fcf7 	bl	80060b6 <USBD_CtlError>
          break;
 80056c8:	e004      	b.n	80056d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fcf2 	bl	80060b6 <USBD_CtlError>
          break;
 80056d2:	e000      	b.n	80056d6 <USBD_StdItfReq+0xc2>
          break;
 80056d4:	bf00      	nop
      }
      break;
 80056d6:	e004      	b.n	80056e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fceb 	bl	80060b6 <USBD_CtlError>
      break;
 80056e0:	bf00      	nop
  }

  return ret;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	889b      	ldrh	r3, [r3, #4]
 80056fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005708:	2b40      	cmp	r3, #64	@ 0x40
 800570a:	d007      	beq.n	800571c <USBD_StdEPReq+0x30>
 800570c:	2b40      	cmp	r3, #64	@ 0x40
 800570e:	f200 817f 	bhi.w	8005a10 <USBD_StdEPReq+0x324>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d02a      	beq.n	800576c <USBD_StdEPReq+0x80>
 8005716:	2b20      	cmp	r3, #32
 8005718:	f040 817a 	bne.w	8005a10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	4619      	mov	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff fe85 	bl	8005430 <USBD_CoreFindEP>
 8005726:	4603      	mov	r3, r0
 8005728:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800572a:	7b7b      	ldrb	r3, [r7, #13]
 800572c:	2bff      	cmp	r3, #255	@ 0xff
 800572e:	f000 8174 	beq.w	8005a1a <USBD_StdEPReq+0x32e>
 8005732:	7b7b      	ldrb	r3, [r7, #13]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f040 8170 	bne.w	8005a1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800573a:	7b7a      	ldrb	r2, [r7, #13]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005742:	7b7a      	ldrb	r2, [r7, #13]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	32ae      	adds	r2, #174	@ 0xae
 8005748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 8163 	beq.w	8005a1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005754:	7b7a      	ldrb	r2, [r7, #13]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	32ae      	adds	r2, #174	@ 0xae
 800575a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
 8005766:	4603      	mov	r3, r0
 8005768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800576a:	e156      	b.n	8005a1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d008      	beq.n	8005786 <USBD_StdEPReq+0x9a>
 8005774:	2b03      	cmp	r3, #3
 8005776:	f300 8145 	bgt.w	8005a04 <USBD_StdEPReq+0x318>
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 809b 	beq.w	80058b6 <USBD_StdEPReq+0x1ca>
 8005780:	2b01      	cmp	r3, #1
 8005782:	d03c      	beq.n	80057fe <USBD_StdEPReq+0x112>
 8005784:	e13e      	b.n	8005a04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d002      	beq.n	8005798 <USBD_StdEPReq+0xac>
 8005792:	2b03      	cmp	r3, #3
 8005794:	d016      	beq.n	80057c4 <USBD_StdEPReq+0xd8>
 8005796:	e02c      	b.n	80057f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005798:	7bbb      	ldrb	r3, [r7, #14]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <USBD_StdEPReq+0xce>
 800579e:	7bbb      	ldrb	r3, [r7, #14]
 80057a0:	2b80      	cmp	r3, #128	@ 0x80
 80057a2:	d00a      	beq.n	80057ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 f9af 	bl	8006b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057ae:	2180      	movs	r1, #128	@ 0x80
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 f9ab 	bl	8006b0c <USBD_LL_StallEP>
 80057b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057b8:	e020      	b.n	80057fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fc7a 	bl	80060b6 <USBD_CtlError>
              break;
 80057c2:	e01b      	b.n	80057fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	885b      	ldrh	r3, [r3, #2]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10e      	bne.n	80057ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057cc:	7bbb      	ldrb	r3, [r7, #14]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <USBD_StdEPReq+0xfe>
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	2b80      	cmp	r3, #128	@ 0x80
 80057d6:	d008      	beq.n	80057ea <USBD_StdEPReq+0xfe>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	88db      	ldrh	r3, [r3, #6]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80057e0:	7bbb      	ldrb	r3, [r7, #14]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 f991 	bl	8006b0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fd3a 	bl	8006264 <USBD_CtlSendStatus>

              break;
 80057f0:	e004      	b.n	80057fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80057f2:	6839      	ldr	r1, [r7, #0]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fc5e 	bl	80060b6 <USBD_CtlError>
              break;
 80057fa:	bf00      	nop
          }
          break;
 80057fc:	e107      	b.n	8005a0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d002      	beq.n	8005810 <USBD_StdEPReq+0x124>
 800580a:	2b03      	cmp	r3, #3
 800580c:	d016      	beq.n	800583c <USBD_StdEPReq+0x150>
 800580e:	e04b      	b.n	80058a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005810:	7bbb      	ldrb	r3, [r7, #14]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <USBD_StdEPReq+0x146>
 8005816:	7bbb      	ldrb	r3, [r7, #14]
 8005818:	2b80      	cmp	r3, #128	@ 0x80
 800581a:	d00a      	beq.n	8005832 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800581c:	7bbb      	ldrb	r3, [r7, #14]
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 f973 	bl	8006b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005826:	2180      	movs	r1, #128	@ 0x80
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 f96f 	bl	8006b0c <USBD_LL_StallEP>
 800582e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005830:	e040      	b.n	80058b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fc3e 	bl	80060b6 <USBD_CtlError>
              break;
 800583a:	e03b      	b.n	80058b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	885b      	ldrh	r3, [r3, #2]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d136      	bne.n	80058b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005844:	7bbb      	ldrb	r3, [r7, #14]
 8005846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800584a:	2b00      	cmp	r3, #0
 800584c:	d004      	beq.n	8005858 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800584e:	7bbb      	ldrb	r3, [r7, #14]
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f001 f979 	bl	8006b4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fd03 	bl	8006264 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800585e:	7bbb      	ldrb	r3, [r7, #14]
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff fde4 	bl	8005430 <USBD_CoreFindEP>
 8005868:	4603      	mov	r3, r0
 800586a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800586c:	7b7b      	ldrb	r3, [r7, #13]
 800586e:	2bff      	cmp	r3, #255	@ 0xff
 8005870:	d01f      	beq.n	80058b2 <USBD_StdEPReq+0x1c6>
 8005872:	7b7b      	ldrb	r3, [r7, #13]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d11c      	bne.n	80058b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005878:	7b7a      	ldrb	r2, [r7, #13]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005880:	7b7a      	ldrb	r2, [r7, #13]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	32ae      	adds	r2, #174	@ 0xae
 8005886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d010      	beq.n	80058b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005890:	7b7a      	ldrb	r2, [r7, #13]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	32ae      	adds	r2, #174	@ 0xae
 8005896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
 80058a2:	4603      	mov	r3, r0
 80058a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80058a6:	e004      	b.n	80058b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fc03 	bl	80060b6 <USBD_CtlError>
              break;
 80058b0:	e000      	b.n	80058b4 <USBD_StdEPReq+0x1c8>
              break;
 80058b2:	bf00      	nop
          }
          break;
 80058b4:	e0ab      	b.n	8005a0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d002      	beq.n	80058c8 <USBD_StdEPReq+0x1dc>
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d032      	beq.n	800592c <USBD_StdEPReq+0x240>
 80058c6:	e097      	b.n	80059f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <USBD_StdEPReq+0x1f2>
 80058ce:	7bbb      	ldrb	r3, [r7, #14]
 80058d0:	2b80      	cmp	r3, #128	@ 0x80
 80058d2:	d004      	beq.n	80058de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fbed 	bl	80060b6 <USBD_CtlError>
                break;
 80058dc:	e091      	b.n	8005a02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da0b      	bge.n	80058fe <USBD_StdEPReq+0x212>
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	3310      	adds	r3, #16
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4413      	add	r3, r2
 80058fa:	3304      	adds	r3, #4
 80058fc:	e00b      	b.n	8005916 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058fe:	7bbb      	ldrb	r3, [r7, #14]
 8005900:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4413      	add	r3, r2
 8005914:	3304      	adds	r3, #4
 8005916:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2202      	movs	r2, #2
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fc43 	bl	80061b0 <USBD_CtlSendData>
              break;
 800592a:	e06a      	b.n	8005a02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800592c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005930:	2b00      	cmp	r3, #0
 8005932:	da11      	bge.n	8005958 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005934:	7bbb      	ldrb	r3, [r7, #14]
 8005936:	f003 020f 	and.w	r2, r3, #15
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	3324      	adds	r3, #36	@ 0x24
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d117      	bne.n	800597e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fbb0 	bl	80060b6 <USBD_CtlError>
                  break;
 8005956:	e054      	b.n	8005a02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005958:	7bbb      	ldrb	r3, [r7, #14]
 800595a:	f003 020f 	and.w	r2, r3, #15
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fb9d 	bl	80060b6 <USBD_CtlError>
                  break;
 800597c:	e041      	b.n	8005a02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800597e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005982:	2b00      	cmp	r3, #0
 8005984:	da0b      	bge.n	800599e <USBD_StdEPReq+0x2b2>
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	3310      	adds	r3, #16
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	4413      	add	r3, r2
 800599a:	3304      	adds	r3, #4
 800599c:	e00b      	b.n	80059b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800599e:	7bbb      	ldrb	r3, [r7, #14]
 80059a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	4413      	add	r3, r2
 80059b4:	3304      	adds	r3, #4
 80059b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80059b8:	7bbb      	ldrb	r3, [r7, #14]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <USBD_StdEPReq+0x2d8>
 80059be:	7bbb      	ldrb	r3, [r7, #14]
 80059c0:	2b80      	cmp	r3, #128	@ 0x80
 80059c2:	d103      	bne.n	80059cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	e00e      	b.n	80059ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 f8d9 	bl	8006b88 <USBD_LL_IsStallEP>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e002      	b.n	80059ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2202      	movs	r2, #2
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fbdd 	bl	80061b0 <USBD_CtlSendData>
              break;
 80059f6:	e004      	b.n	8005a02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fb5b 	bl	80060b6 <USBD_CtlError>
              break;
 8005a00:	bf00      	nop
          }
          break;
 8005a02:	e004      	b.n	8005a0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fb55 	bl	80060b6 <USBD_CtlError>
          break;
 8005a0c:	bf00      	nop
      }
      break;
 8005a0e:	e005      	b.n	8005a1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fb4f 	bl	80060b6 <USBD_CtlError>
      break;
 8005a18:	e000      	b.n	8005a1c <USBD_StdEPReq+0x330>
      break;
 8005a1a:	bf00      	nop
  }

  return ret;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	885b      	ldrh	r3, [r3, #2]
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	f200 8128 	bhi.w	8005c9e <USBD_GetDescriptor+0x276>
 8005a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <USBD_GetDescriptor+0x2c>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a71 	.word	0x08005a71
 8005a58:	08005a89 	.word	0x08005a89
 8005a5c:	08005ac9 	.word	0x08005ac9
 8005a60:	08005c9f 	.word	0x08005c9f
 8005a64:	08005c9f 	.word	0x08005c9f
 8005a68:	08005c3f 	.word	0x08005c3f
 8005a6c:	08005c6b 	.word	0x08005c6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	7c12      	ldrb	r2, [r2, #16]
 8005a7c:	f107 0108 	add.w	r1, r7, #8
 8005a80:	4610      	mov	r0, r2
 8005a82:	4798      	blx	r3
 8005a84:	60f8      	str	r0, [r7, #12]
      break;
 8005a86:	e112      	b.n	8005cae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	7c1b      	ldrb	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10d      	bne.n	8005aac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a98:	f107 0208 	add.w	r2, r7, #8
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4798      	blx	r3
 8005aa0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005aaa:	e100      	b.n	8005cae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	f107 0208 	add.w	r2, r7, #8
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	701a      	strb	r2, [r3, #0]
      break;
 8005ac6:	e0f2      	b.n	8005cae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	885b      	ldrh	r3, [r3, #2]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	f200 80ac 	bhi.w	8005c2c <USBD_GetDescriptor+0x204>
 8005ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8005adc <USBD_GetDescriptor+0xb4>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005af5 	.word	0x08005af5
 8005ae0:	08005b29 	.word	0x08005b29
 8005ae4:	08005b5d 	.word	0x08005b5d
 8005ae8:	08005b91 	.word	0x08005b91
 8005aec:	08005bc5 	.word	0x08005bc5
 8005af0:	08005bf9 	.word	0x08005bf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	7c12      	ldrb	r2, [r2, #16]
 8005b0c:	f107 0108 	add.w	r1, r7, #8
 8005b10:	4610      	mov	r0, r2
 8005b12:	4798      	blx	r3
 8005b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b16:	e091      	b.n	8005c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 facb 	bl	80060b6 <USBD_CtlError>
            err++;
 8005b20:	7afb      	ldrb	r3, [r7, #11]
 8005b22:	3301      	adds	r3, #1
 8005b24:	72fb      	strb	r3, [r7, #11]
          break;
 8005b26:	e089      	b.n	8005c3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	7c12      	ldrb	r2, [r2, #16]
 8005b40:	f107 0108 	add.w	r1, r7, #8
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
 8005b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b4a:	e077      	b.n	8005c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fab1 	bl	80060b6 <USBD_CtlError>
            err++;
 8005b54:	7afb      	ldrb	r3, [r7, #11]
 8005b56:	3301      	adds	r3, #1
 8005b58:	72fb      	strb	r3, [r7, #11]
          break;
 8005b5a:	e06f      	b.n	8005c3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	7c12      	ldrb	r2, [r2, #16]
 8005b74:	f107 0108 	add.w	r1, r7, #8
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4798      	blx	r3
 8005b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b7e:	e05d      	b.n	8005c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa97 	bl	80060b6 <USBD_CtlError>
            err++;
 8005b88:	7afb      	ldrb	r3, [r7, #11]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b8e:	e055      	b.n	8005c3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00b      	beq.n	8005bb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	7c12      	ldrb	r2, [r2, #16]
 8005ba8:	f107 0108 	add.w	r1, r7, #8
 8005bac:	4610      	mov	r0, r2
 8005bae:	4798      	blx	r3
 8005bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bb2:	e043      	b.n	8005c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa7d 	bl	80060b6 <USBD_CtlError>
            err++;
 8005bbc:	7afb      	ldrb	r3, [r7, #11]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8005bc2:	e03b      	b.n	8005c3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	7c12      	ldrb	r2, [r2, #16]
 8005bdc:	f107 0108 	add.w	r1, r7, #8
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
 8005be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005be6:	e029      	b.n	8005c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa63 	bl	80060b6 <USBD_CtlError>
            err++;
 8005bf0:	7afb      	ldrb	r3, [r7, #11]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8005bf6:	e021      	b.n	8005c3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	7c12      	ldrb	r2, [r2, #16]
 8005c10:	f107 0108 	add.w	r1, r7, #8
 8005c14:	4610      	mov	r0, r2
 8005c16:	4798      	blx	r3
 8005c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c1a:	e00f      	b.n	8005c3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fa49 	bl	80060b6 <USBD_CtlError>
            err++;
 8005c24:	7afb      	ldrb	r3, [r7, #11]
 8005c26:	3301      	adds	r3, #1
 8005c28:	72fb      	strb	r3, [r7, #11]
          break;
 8005c2a:	e007      	b.n	8005c3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fa41 	bl	80060b6 <USBD_CtlError>
          err++;
 8005c34:	7afb      	ldrb	r3, [r7, #11]
 8005c36:	3301      	adds	r3, #1
 8005c38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005c3a:	bf00      	nop
      }
      break;
 8005c3c:	e037      	b.n	8005cae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	7c1b      	ldrb	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4e:	f107 0208 	add.w	r2, r7, #8
 8005c52:	4610      	mov	r0, r2
 8005c54:	4798      	blx	r3
 8005c56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c58:	e029      	b.n	8005cae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fa2a 	bl	80060b6 <USBD_CtlError>
        err++;
 8005c62:	7afb      	ldrb	r3, [r7, #11]
 8005c64:	3301      	adds	r3, #1
 8005c66:	72fb      	strb	r3, [r7, #11]
      break;
 8005c68:	e021      	b.n	8005cae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	7c1b      	ldrb	r3, [r3, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10d      	bne.n	8005c8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7a:	f107 0208 	add.w	r2, r7, #8
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4798      	blx	r3
 8005c82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	2207      	movs	r2, #7
 8005c8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c8c:	e00f      	b.n	8005cae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fa10 	bl	80060b6 <USBD_CtlError>
        err++;
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c9c:	e007      	b.n	8005cae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fa08 	bl	80060b6 <USBD_CtlError>
      err++;
 8005ca6:	7afb      	ldrb	r3, [r7, #11]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	72fb      	strb	r3, [r7, #11]
      break;
 8005cac:	bf00      	nop
  }

  if (err != 0U)
 8005cae:	7afb      	ldrb	r3, [r7, #11]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d11e      	bne.n	8005cf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	88db      	ldrh	r3, [r3, #6]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d016      	beq.n	8005cea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005cbc:	893b      	ldrh	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00e      	beq.n	8005ce0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	88da      	ldrh	r2, [r3, #6]
 8005cc6:	893b      	ldrh	r3, [r7, #8]
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	bf28      	it	cs
 8005ccc:	4613      	movcs	r3, r2
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005cd2:	893b      	ldrh	r3, [r7, #8]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68f9      	ldr	r1, [r7, #12]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fa69 	bl	80061b0 <USBD_CtlSendData>
 8005cde:	e009      	b.n	8005cf4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f9e7 	bl	80060b6 <USBD_CtlError>
 8005ce8:	e004      	b.n	8005cf4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 faba 	bl	8006264 <USBD_CtlSendStatus>
 8005cf0:	e000      	b.n	8005cf4 <USBD_GetDescriptor+0x2cc>
    return;
 8005cf2:	bf00      	nop
  }
}
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop

08005cfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	889b      	ldrh	r3, [r3, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d131      	bne.n	8005d72 <USBD_SetAddress+0x76>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	88db      	ldrh	r3, [r3, #6]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d12d      	bne.n	8005d72 <USBD_SetAddress+0x76>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	885b      	ldrh	r3, [r3, #2]
 8005d1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d1c:	d829      	bhi.n	8005d72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	885b      	ldrh	r3, [r3, #2]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d104      	bne.n	8005d40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f9bc 	bl	80060b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3e:	e01d      	b.n	8005d7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	7bfa      	ldrb	r2, [r7, #15]
 8005d44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 ff47 	bl	8006be0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa86 	bl	8006264 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2202      	movs	r2, #2
 8005d62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d66:	e009      	b.n	8005d7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d70:	e004      	b.n	8005d7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d72:	6839      	ldr	r1, [r7, #0]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f99e 	bl	80060b6 <USBD_CtlError>
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	885b      	ldrh	r3, [r3, #2]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	4b4e      	ldr	r3, [pc, #312]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005d9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d905      	bls.n	8005db0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f985 	bl	80060b6 <USBD_CtlError>
    return USBD_FAIL;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e08c      	b.n	8005eca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d002      	beq.n	8005dc2 <USBD_SetConfig+0x3e>
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d029      	beq.n	8005e14 <USBD_SetConfig+0x90>
 8005dc0:	e075      	b.n	8005eae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005dc2:	4b44      	ldr	r3, [pc, #272]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d020      	beq.n	8005e0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005dca:	4b42      	ldr	r3, [pc, #264]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fe ffe3 	bl	8004da6 <USBD_SetClassConfig>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f962 	bl	80060b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005dfa:	e065      	b.n	8005ec8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fa31 	bl	8006264 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2203      	movs	r2, #3
 8005e06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005e0a:	e05d      	b.n	8005ec8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fa29 	bl	8006264 <USBD_CtlSendStatus>
      break;
 8005e12:	e059      	b.n	8005ec8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005e14:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d112      	bne.n	8005e42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005e24:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e2e:	4b29      	ldr	r3, [pc, #164]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fe ffd2 	bl	8004dde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa12 	bl	8006264 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005e40:	e042      	b.n	8005ec8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005e42:	4b24      	ldr	r3, [pc, #144]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d02a      	beq.n	8005ea6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7fe ffc0 	bl	8004dde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e68:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fe ff99 	bl	8004da6 <USBD_SetClassConfig>
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00f      	beq.n	8005e9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f918 	bl	80060b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fe ffa5 	bl	8004dde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005e9c:	e014      	b.n	8005ec8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f9e0 	bl	8006264 <USBD_CtlSendStatus>
      break;
 8005ea4:	e010      	b.n	8005ec8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f9dc 	bl	8006264 <USBD_CtlSendStatus>
      break;
 8005eac:	e00c      	b.n	8005ec8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f900 	bl	80060b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005eb6:	4b07      	ldr	r3, [pc, #28]	@ (8005ed4 <USBD_SetConfig+0x150>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7fe ff8e 	bl	8004dde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec6:	bf00      	nop
  }

  return ret;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000128 	.word	0x20000128

08005ed8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	88db      	ldrh	r3, [r3, #6]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d004      	beq.n	8005ef4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f8e2 	bl	80060b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005ef2:	e023      	b.n	8005f3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	dc02      	bgt.n	8005f06 <USBD_GetConfig+0x2e>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	dc03      	bgt.n	8005f0c <USBD_GetConfig+0x34>
 8005f04:	e015      	b.n	8005f32 <USBD_GetConfig+0x5a>
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d00b      	beq.n	8005f22 <USBD_GetConfig+0x4a>
 8005f0a:	e012      	b.n	8005f32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3308      	adds	r3, #8
 8005f16:	2201      	movs	r2, #1
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f948 	bl	80061b0 <USBD_CtlSendData>
        break;
 8005f20:	e00c      	b.n	8005f3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3304      	adds	r3, #4
 8005f26:	2201      	movs	r2, #1
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f940 	bl	80061b0 <USBD_CtlSendData>
        break;
 8005f30:	e004      	b.n	8005f3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8be 	bl	80060b6 <USBD_CtlError>
        break;
 8005f3a:	bf00      	nop
}
 8005f3c:	bf00      	nop
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d81e      	bhi.n	8005f9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	88db      	ldrh	r3, [r3, #6]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d004      	beq.n	8005f6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8a5 	bl	80060b6 <USBD_CtlError>
        break;
 8005f6c:	e01a      	b.n	8005fa4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f043 0202 	orr.w	r2, r3, #2
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	2202      	movs	r2, #2
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f90c 	bl	80061b0 <USBD_CtlSendData>
      break;
 8005f98:	e004      	b.n	8005fa4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f88a 	bl	80060b6 <USBD_CtlError>
      break;
 8005fa2:	bf00      	nop
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	885b      	ldrh	r3, [r3, #2]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d107      	bne.n	8005fce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f94c 	bl	8006264 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005fcc:	e013      	b.n	8005ff6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	885b      	ldrh	r3, [r3, #2]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d10b      	bne.n	8005fee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	889b      	ldrh	r3, [r3, #4]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f93c 	bl	8006264 <USBD_CtlSendStatus>
}
 8005fec:	e003      	b.n	8005ff6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f860 	bl	80060b6 <USBD_CtlError>
}
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800600e:	b2db      	uxtb	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	2b02      	cmp	r3, #2
 8006014:	d80b      	bhi.n	800602e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	885b      	ldrh	r3, [r3, #2]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d10c      	bne.n	8006038 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f91c 	bl	8006264 <USBD_CtlSendStatus>
      }
      break;
 800602c:	e004      	b.n	8006038 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f840 	bl	80060b6 <USBD_CtlError>
      break;
 8006036:	e000      	b.n	800603a <USBD_ClrFeature+0x3c>
      break;
 8006038:	bf00      	nop
  }
}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	781a      	ldrb	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3301      	adds	r3, #1
 800605c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3301      	adds	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff fa40 	bl	80054f2 <SWAPBYTE>
 8006072:	4603      	mov	r3, r0
 8006074:	461a      	mov	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3301      	adds	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff fa33 	bl	80054f2 <SWAPBYTE>
 800608c:	4603      	mov	r3, r0
 800608e:	461a      	mov	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3301      	adds	r3, #1
 800609e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff fa26 	bl	80054f2 <SWAPBYTE>
 80060a6:	4603      	mov	r3, r0
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	80da      	strh	r2, [r3, #6]
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80060c0:	2180      	movs	r1, #128	@ 0x80
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fd22 	bl	8006b0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80060c8:	2100      	movs	r1, #0
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fd1e 	bl	8006b0c <USBD_LL_StallEP>
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d042      	beq.n	8006174 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80060f2:	6938      	ldr	r0, [r7, #16]
 80060f4:	f000 f842 	bl	800617c <USBD_GetLen>
 80060f8:	4603      	mov	r3, r0
 80060fa:	3301      	adds	r3, #1
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006102:	d808      	bhi.n	8006116 <USBD_GetString+0x3e>
 8006104:	6938      	ldr	r0, [r7, #16]
 8006106:	f000 f839 	bl	800617c <USBD_GetLen>
 800610a:	4603      	mov	r3, r0
 800610c:	3301      	adds	r3, #1
 800610e:	b29b      	uxth	r3, r3
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	e001      	b.n	800611a <USBD_GetString+0x42>
 8006116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800611e:	7dfb      	ldrb	r3, [r7, #23]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	4413      	add	r3, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	7812      	ldrb	r2, [r2, #0]
 8006128:	701a      	strb	r2, [r3, #0]
  idx++;
 800612a:	7dfb      	ldrb	r3, [r7, #23]
 800612c:	3301      	adds	r3, #1
 800612e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006130:	7dfb      	ldrb	r3, [r7, #23]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	2203      	movs	r2, #3
 8006138:	701a      	strb	r2, [r3, #0]
  idx++;
 800613a:	7dfb      	ldrb	r3, [r7, #23]
 800613c:	3301      	adds	r3, #1
 800613e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006140:	e013      	b.n	800616a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	4413      	add	r3, r2
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	7812      	ldrb	r2, [r2, #0]
 800614c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	3301      	adds	r3, #1
 8006152:	613b      	str	r3, [r7, #16]
    idx++;
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	3301      	adds	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	4413      	add	r3, r2
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
    idx++;
 8006164:	7dfb      	ldrb	r3, [r7, #23]
 8006166:	3301      	adds	r3, #1
 8006168:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e7      	bne.n	8006142 <USBD_GetString+0x6a>
 8006172:	e000      	b.n	8006176 <USBD_GetString+0x9e>
    return;
 8006174:	bf00      	nop
  }
}
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800618c:	e005      	b.n	800619a <USBD_GetLen+0x1e>
  {
    len++;
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	3301      	adds	r3, #1
 8006192:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	3301      	adds	r3, #1
 8006198:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1f5      	bne.n	800618e <USBD_GetLen+0x12>
  }

  return len;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2202      	movs	r2, #2
 80061c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	2100      	movs	r1, #0
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fd21 	bl	8006c1e <USBD_LL_Transmit>

  return USBD_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	2100      	movs	r1, #0
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fd10 	bl	8006c1e <USBD_LL_Transmit>

  return USBD_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2203      	movs	r2, #3
 8006218:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	2100      	movs	r1, #0
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fd14 	bl	8006c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	2100      	movs	r1, #0
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fd03 	bl	8006c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2204      	movs	r2, #4
 8006270:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006274:	2300      	movs	r3, #0
 8006276:	2200      	movs	r2, #0
 8006278:	2100      	movs	r1, #0
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fccf 	bl	8006c1e <USBD_LL_Transmit>

  return USBD_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2205      	movs	r2, #5
 8006296:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800629a:	2300      	movs	r3, #0
 800629c:	2200      	movs	r2, #0
 800629e:	2100      	movs	r1, #0
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fcdd 	bl	8006c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062b4:	2200      	movs	r2, #0
 80062b6:	4912      	ldr	r1, [pc, #72]	@ (8006300 <MX_USB_DEVICE_Init+0x50>)
 80062b8:	4812      	ldr	r0, [pc, #72]	@ (8006304 <MX_USB_DEVICE_Init+0x54>)
 80062ba:	f7fe fcf7 	bl	8004cac <USBD_Init>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062c4:	f7fa f9fc 	bl	80006c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062c8:	490f      	ldr	r1, [pc, #60]	@ (8006308 <MX_USB_DEVICE_Init+0x58>)
 80062ca:	480e      	ldr	r0, [pc, #56]	@ (8006304 <MX_USB_DEVICE_Init+0x54>)
 80062cc:	f7fe fd1e 	bl	8004d0c <USBD_RegisterClass>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80062d6:	f7fa f9f3 	bl	80006c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80062da:	490c      	ldr	r1, [pc, #48]	@ (800630c <MX_USB_DEVICE_Init+0x5c>)
 80062dc:	4809      	ldr	r0, [pc, #36]	@ (8006304 <MX_USB_DEVICE_Init+0x54>)
 80062de:	f7fe fc15 	bl	8004b0c <USBD_CDC_RegisterInterface>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80062e8:	f7fa f9ea 	bl	80006c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80062ec:	4805      	ldr	r0, [pc, #20]	@ (8006304 <MX_USB_DEVICE_Init+0x54>)
 80062ee:	f7fe fd43 	bl	8004d78 <USBD_Start>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80062f8:	f7fa f9e2 	bl	80006c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80062fc:	bf00      	nop
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	200000b0 	.word	0x200000b0
 8006304:	2000012c 	.word	0x2000012c
 8006308:	2000001c 	.word	0x2000001c
 800630c:	2000009c 	.word	0x2000009c

08006310 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006314:	2200      	movs	r2, #0
 8006316:	4905      	ldr	r1, [pc, #20]	@ (800632c <CDC_Init_FS+0x1c>)
 8006318:	4805      	ldr	r0, [pc, #20]	@ (8006330 <CDC_Init_FS+0x20>)
 800631a:	f7fe fc11 	bl	8004b40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800631e:	4905      	ldr	r1, [pc, #20]	@ (8006334 <CDC_Init_FS+0x24>)
 8006320:	4803      	ldr	r0, [pc, #12]	@ (8006330 <CDC_Init_FS+0x20>)
 8006322:	f7fe fc2f 	bl	8004b84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006326:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006328:	4618      	mov	r0, r3
 800632a:	bd80      	pop	{r7, pc}
 800632c:	20000c08 	.word	0x20000c08
 8006330:	2000012c 	.word	0x2000012c
 8006334:	20000408 	.word	0x20000408

08006338 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800633c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800633e:	4618      	mov	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	6039      	str	r1, [r7, #0]
 8006352:	71fb      	strb	r3, [r7, #7]
 8006354:	4613      	mov	r3, r2
 8006356:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	2b23      	cmp	r3, #35	@ 0x23
 800635c:	d870      	bhi.n	8006440 <CDC_Control_FS+0xf8>
 800635e:	a201      	add	r2, pc, #4	@ (adr r2, 8006364 <CDC_Control_FS+0x1c>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006441 	.word	0x08006441
 8006368:	08006441 	.word	0x08006441
 800636c:	08006441 	.word	0x08006441
 8006370:	08006441 	.word	0x08006441
 8006374:	08006441 	.word	0x08006441
 8006378:	08006441 	.word	0x08006441
 800637c:	08006441 	.word	0x08006441
 8006380:	08006441 	.word	0x08006441
 8006384:	08006441 	.word	0x08006441
 8006388:	08006441 	.word	0x08006441
 800638c:	08006441 	.word	0x08006441
 8006390:	08006441 	.word	0x08006441
 8006394:	08006441 	.word	0x08006441
 8006398:	08006441 	.word	0x08006441
 800639c:	08006441 	.word	0x08006441
 80063a0:	08006441 	.word	0x08006441
 80063a4:	08006441 	.word	0x08006441
 80063a8:	08006441 	.word	0x08006441
 80063ac:	08006441 	.word	0x08006441
 80063b0:	08006441 	.word	0x08006441
 80063b4:	08006441 	.word	0x08006441
 80063b8:	08006441 	.word	0x08006441
 80063bc:	08006441 	.word	0x08006441
 80063c0:	08006441 	.word	0x08006441
 80063c4:	08006441 	.word	0x08006441
 80063c8:	08006441 	.word	0x08006441
 80063cc:	08006441 	.word	0x08006441
 80063d0:	08006441 	.word	0x08006441
 80063d4:	08006441 	.word	0x08006441
 80063d8:	08006441 	.word	0x08006441
 80063dc:	08006441 	.word	0x08006441
 80063e0:	08006441 	.word	0x08006441
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	0800641d 	.word	0x0800641d
 80063ec:	08006441 	.word	0x08006441
 80063f0:	08006441 	.word	0x08006441
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	for (int i = 0; i < length; i++) {
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	e00b      	b.n	8006412 <CDC_Control_FS+0xca>
    	                Buffer[i] = pbuf[i];
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	4413      	add	r3, r2
 8006400:	7819      	ldrb	r1, [r3, #0]
 8006402:	4a13      	ldr	r2, [pc, #76]	@ (8006450 <CDC_Control_FS+0x108>)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	460a      	mov	r2, r1
 800640a:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i < length; i++) {
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	88bb      	ldrh	r3, [r7, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	429a      	cmp	r2, r3
 8006418:	dbef      	blt.n	80063fa <CDC_Control_FS+0xb2>
    	            }
    break;
 800641a:	e012      	b.n	8006442 <CDC_Control_FS+0xfa>

    case CDC_GET_LINE_CODING:
    	for (int i = 0; i < sizeof(Buffer); i++) {
 800641c:	2300      	movs	r3, #0
 800641e:	60bb      	str	r3, [r7, #8]
 8006420:	e00a      	b.n	8006438 <CDC_Control_FS+0xf0>
    	                pbuf[i] = Buffer[i];
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	4413      	add	r3, r2
 8006428:	4909      	ldr	r1, [pc, #36]	@ (8006450 <CDC_Control_FS+0x108>)
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	440a      	add	r2, r1
 800642e:	7812      	ldrb	r2, [r2, #0]
 8006430:	701a      	strb	r2, [r3, #0]
    	for (int i = 0; i < sizeof(Buffer); i++) {
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	3301      	adds	r3, #1
 8006436:	60bb      	str	r3, [r7, #8]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b06      	cmp	r3, #6
 800643c:	d9f1      	bls.n	8006422 <CDC_Control_FS+0xda>
    	            }
    break;
 800643e:	e000      	b.n	8006442 <CDC_Control_FS+0xfa>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006440:	bf00      	nop
  }

  return (USBD_OK);
 8006442:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	20001408 	.word	0x20001408

08006454 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	480a      	ldr	r0, [pc, #40]	@ (800648c <CDC_Receive_FS+0x38>)
 8006462:	f7fe fb8f 	bl	8004b84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006466:	4809      	ldr	r0, [pc, #36]	@ (800648c <CDC_Receive_FS+0x38>)
 8006468:	f7fe fbea 	bl	8004c40 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	73fb      	strb	r3, [r7, #15]
//  memcpy(buffer,Buf,len);
  buffer = Buf[0];
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	781a      	ldrb	r2, [r3, #0]
 8006476:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <CDC_Receive_FS+0x3c>)
 8006478:	701a      	strb	r2, [r3, #0]
  flag=1;
 800647a:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <CDC_Receive_FS+0x40>)
 800647c:	2201      	movs	r2, #1
 800647e:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 8006480:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	2000012c 	.word	0x2000012c
 8006490:	2000011c 	.word	0x2000011c
 8006494:	20000120 	.word	0x20000120

08006498 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80064a8:	4b0d      	ldr	r3, [pc, #52]	@ (80064e0 <CDC_Transmit_FS+0x48>)
 80064aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80064ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e00b      	b.n	80064d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80064be:	887b      	ldrh	r3, [r7, #2]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4806      	ldr	r0, [pc, #24]	@ (80064e0 <CDC_Transmit_FS+0x48>)
 80064c6:	f7fe fb3b 	bl	8004b40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80064ca:	4805      	ldr	r0, [pc, #20]	@ (80064e0 <CDC_Transmit_FS+0x48>)
 80064cc:	f7fe fb78 	bl	8004bc0 <USBD_CDC_TransmitPacket>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	2000012c 	.word	0x2000012c

080064e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80064f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	6039      	str	r1, [r7, #0]
 8006512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2212      	movs	r2, #18
 8006518:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800651a:	4b03      	ldr	r3, [pc, #12]	@ (8006528 <USBD_FS_DeviceDescriptor+0x20>)
}
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	200000cc 	.word	0x200000cc

0800652c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	4603      	mov	r3, r0
 8006534:	6039      	str	r1, [r7, #0]
 8006536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2204      	movs	r2, #4
 800653c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800653e:	4b03      	ldr	r3, [pc, #12]	@ (800654c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	200000e0 	.word	0x200000e0

08006550 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d105      	bne.n	800656e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4907      	ldr	r1, [pc, #28]	@ (8006584 <USBD_FS_ProductStrDescriptor+0x34>)
 8006566:	4808      	ldr	r0, [pc, #32]	@ (8006588 <USBD_FS_ProductStrDescriptor+0x38>)
 8006568:	f7ff fdb6 	bl	80060d8 <USBD_GetString>
 800656c:	e004      	b.n	8006578 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	4904      	ldr	r1, [pc, #16]	@ (8006584 <USBD_FS_ProductStrDescriptor+0x34>)
 8006572:	4805      	ldr	r0, [pc, #20]	@ (8006588 <USBD_FS_ProductStrDescriptor+0x38>)
 8006574:	f7ff fdb0 	bl	80060d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006578:	4b02      	ldr	r3, [pc, #8]	@ (8006584 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20001410 	.word	0x20001410
 8006588:	08006dcc 	.word	0x08006dcc

0800658c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	6039      	str	r1, [r7, #0]
 8006596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	4904      	ldr	r1, [pc, #16]	@ (80065ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800659c:	4804      	ldr	r0, [pc, #16]	@ (80065b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800659e:	f7ff fd9b 	bl	80060d8 <USBD_GetString>
  return USBD_StrDesc;
 80065a2:	4b02      	ldr	r3, [pc, #8]	@ (80065ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20001410 	.word	0x20001410
 80065b0:	08006de4 	.word	0x08006de4

080065b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	6039      	str	r1, [r7, #0]
 80065be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	221a      	movs	r2, #26
 80065c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80065c6:	f000 f843 	bl	8006650 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80065ca:	4b02      	ldr	r3, [pc, #8]	@ (80065d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	200000e4 	.word	0x200000e4

080065d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	6039      	str	r1, [r7, #0]
 80065e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d105      	bne.n	80065f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	4907      	ldr	r1, [pc, #28]	@ (800660c <USBD_FS_ConfigStrDescriptor+0x34>)
 80065ee:	4808      	ldr	r0, [pc, #32]	@ (8006610 <USBD_FS_ConfigStrDescriptor+0x38>)
 80065f0:	f7ff fd72 	bl	80060d8 <USBD_GetString>
 80065f4:	e004      	b.n	8006600 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	4904      	ldr	r1, [pc, #16]	@ (800660c <USBD_FS_ConfigStrDescriptor+0x34>)
 80065fa:	4805      	ldr	r0, [pc, #20]	@ (8006610 <USBD_FS_ConfigStrDescriptor+0x38>)
 80065fc:	f7ff fd6c 	bl	80060d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006600:	4b02      	ldr	r3, [pc, #8]	@ (800660c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20001410 	.word	0x20001410
 8006610:	08006df8 	.word	0x08006df8

08006614 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	6039      	str	r1, [r7, #0]
 800661e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d105      	bne.n	8006632 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	4907      	ldr	r1, [pc, #28]	@ (8006648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800662a:	4808      	ldr	r0, [pc, #32]	@ (800664c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800662c:	f7ff fd54 	bl	80060d8 <USBD_GetString>
 8006630:	e004      	b.n	800663c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	4904      	ldr	r1, [pc, #16]	@ (8006648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006636:	4805      	ldr	r0, [pc, #20]	@ (800664c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006638:	f7ff fd4e 	bl	80060d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800663c:	4b02      	ldr	r3, [pc, #8]	@ (8006648 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20001410 	.word	0x20001410
 800664c:	08006e04 	.word	0x08006e04

08006650 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006656:	4b0f      	ldr	r3, [pc, #60]	@ (8006694 <Get_SerialNum+0x44>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800665c:	4b0e      	ldr	r3, [pc, #56]	@ (8006698 <Get_SerialNum+0x48>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006662:	4b0e      	ldr	r3, [pc, #56]	@ (800669c <Get_SerialNum+0x4c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006676:	2208      	movs	r2, #8
 8006678:	4909      	ldr	r1, [pc, #36]	@ (80066a0 <Get_SerialNum+0x50>)
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f814 	bl	80066a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006680:	2204      	movs	r2, #4
 8006682:	4908      	ldr	r1, [pc, #32]	@ (80066a4 <Get_SerialNum+0x54>)
 8006684:	68b8      	ldr	r0, [r7, #8]
 8006686:	f000 f80f 	bl	80066a8 <IntToUnicode>
  }
}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	1fff7a10 	.word	0x1fff7a10
 8006698:	1fff7a14 	.word	0x1fff7a14
 800669c:	1fff7a18 	.word	0x1fff7a18
 80066a0:	200000e6 	.word	0x200000e6
 80066a4:	200000f6 	.word	0x200000f6

080066a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80066ba:	2300      	movs	r3, #0
 80066bc:	75fb      	strb	r3, [r7, #23]
 80066be:	e027      	b.n	8006710 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	0f1b      	lsrs	r3, r3, #28
 80066c4:	2b09      	cmp	r3, #9
 80066c6:	d80b      	bhi.n	80066e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	0f1b      	lsrs	r3, r3, #28
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	4619      	mov	r1, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	440b      	add	r3, r1
 80066d8:	3230      	adds	r2, #48	@ 0x30
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	e00a      	b.n	80066f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	0f1b      	lsrs	r3, r3, #28
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	7dfb      	ldrb	r3, [r7, #23]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	4619      	mov	r1, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	440b      	add	r3, r1
 80066f0:	3237      	adds	r2, #55	@ 0x37
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	3301      	adds	r3, #1
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	4413      	add	r3, r2
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	3301      	adds	r3, #1
 800670e:	75fb      	strb	r3, [r7, #23]
 8006710:	7dfa      	ldrb	r2, [r7, #23]
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	429a      	cmp	r2, r3
 8006716:	d3d3      	bcc.n	80066c0 <IntToUnicode+0x18>
  }
}
 8006718:	bf00      	nop
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	@ 0x28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006730:	f107 0314 	add.w	r3, r7, #20
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006748:	d13a      	bne.n	80067c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800674a:	2300      	movs	r3, #0
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	4b1e      	ldr	r3, [pc, #120]	@ (80067c8 <HAL_PCD_MspInit+0xa0>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006752:	4a1d      	ldr	r2, [pc, #116]	@ (80067c8 <HAL_PCD_MspInit+0xa0>)
 8006754:	f043 0301 	orr.w	r3, r3, #1
 8006758:	6313      	str	r3, [r2, #48]	@ 0x30
 800675a:	4b1b      	ldr	r3, [pc, #108]	@ (80067c8 <HAL_PCD_MspInit+0xa0>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006766:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800676a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800676c:	2302      	movs	r3, #2
 800676e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006770:	2300      	movs	r3, #0
 8006772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006774:	2303      	movs	r3, #3
 8006776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006778:	230a      	movs	r3, #10
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800677c:	f107 0314 	add.w	r3, r7, #20
 8006780:	4619      	mov	r1, r3
 8006782:	4812      	ldr	r0, [pc, #72]	@ (80067cc <HAL_PCD_MspInit+0xa4>)
 8006784:	f7fa f9e8 	bl	8000b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006788:	4b0f      	ldr	r3, [pc, #60]	@ (80067c8 <HAL_PCD_MspInit+0xa0>)
 800678a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678c:	4a0e      	ldr	r2, [pc, #56]	@ (80067c8 <HAL_PCD_MspInit+0xa0>)
 800678e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006792:	6353      	str	r3, [r2, #52]	@ 0x34
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	4b0b      	ldr	r3, [pc, #44]	@ (80067c8 <HAL_PCD_MspInit+0xa0>)
 800679a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679c:	4a0a      	ldr	r2, [pc, #40]	@ (80067c8 <HAL_PCD_MspInit+0xa0>)
 800679e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80067a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80067a4:	4b08      	ldr	r3, [pc, #32]	@ (80067c8 <HAL_PCD_MspInit+0xa0>)
 80067a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80067b0:	2200      	movs	r2, #0
 80067b2:	2100      	movs	r1, #0
 80067b4:	2043      	movs	r0, #67	@ 0x43
 80067b6:	f7fa f998 	bl	8000aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80067ba:	2043      	movs	r0, #67	@ 0x43
 80067bc:	f7fa f9b1 	bl	8000b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80067c0:	bf00      	nop
 80067c2:	3728      	adds	r7, #40	@ 0x28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40020000 	.word	0x40020000

080067d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f7fe fb13 	bl	8004e12 <USBD_LL_SetupStage>
}
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	4619      	mov	r1, r3
 800681e:	f7fe fb4d 	bl	8004ebc <USBD_LL_DataOutStage>
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b082      	sub	sp, #8
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800683c:	78fa      	ldrb	r2, [r7, #3]
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	3320      	adds	r3, #32
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	4619      	mov	r1, r3
 8006852:	f7fe fbe6 	bl	8005022 <USBD_LL_DataInStage>
}
 8006856:	bf00      	nop
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe fd20 	bl	80052b2 <USBD_LL_SOF>
}
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006882:	2301      	movs	r3, #1
 8006884:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	79db      	ldrb	r3, [r3, #7]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
 8006892:	e008      	b.n	80068a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	79db      	ldrb	r3, [r3, #7]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d102      	bne.n	80068a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
 80068a0:	e001      	b.n	80068a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80068a2:	f7f9 ff0d 	bl	80006c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068ac:	7bfa      	ldrb	r2, [r7, #15]
 80068ae:	4611      	mov	r1, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe fcba 	bl	800522a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe fc62 	bl	8005186 <USBD_LL_Reset>
}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe fcb5 	bl	800524a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6812      	ldr	r2, [r2, #0]
 80068ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	7adb      	ldrb	r3, [r3, #11]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006900:	4b04      	ldr	r3, [pc, #16]	@ (8006914 <HAL_PCD_SuspendCallback+0x48>)
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	4a03      	ldr	r2, [pc, #12]	@ (8006914 <HAL_PCD_SuspendCallback+0x48>)
 8006906:	f043 0306 	orr.w	r3, r3, #6
 800690a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800690c:	bf00      	nop
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	e000ed00 	.word	0xe000ed00

08006918 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe fcab 	bl	8005282 <USBD_LL_Resume>
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006946:	78fa      	ldrb	r2, [r7, #3]
 8006948:	4611      	mov	r1, r2
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fd03 	bl	8005356 <USBD_LL_IsoOUTIncomplete>
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800696a:	78fa      	ldrb	r2, [r7, #3]
 800696c:	4611      	mov	r1, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe fcbf 	bl	80052f2 <USBD_LL_IsoINIncomplete>
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fd15 	bl	80053ba <USBD_LL_DevConnected>
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fd12 	bl	80053d0 <USBD_LL_DevDisconnected>
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d13c      	bne.n	8006a3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80069c4:	4a20      	ldr	r2, [pc, #128]	@ (8006a48 <USBD_LL_Init+0x94>)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006a48 <USBD_LL_Init+0x94>)
 80069d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a48 <USBD_LL_Init+0x94>)
 80069d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80069da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80069dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a48 <USBD_LL_Init+0x94>)
 80069de:	2204      	movs	r2, #4
 80069e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80069e2:	4b19      	ldr	r3, [pc, #100]	@ (8006a48 <USBD_LL_Init+0x94>)
 80069e4:	2202      	movs	r2, #2
 80069e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069e8:	4b17      	ldr	r3, [pc, #92]	@ (8006a48 <USBD_LL_Init+0x94>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80069ee:	4b16      	ldr	r3, [pc, #88]	@ (8006a48 <USBD_LL_Init+0x94>)
 80069f0:	2202      	movs	r2, #2
 80069f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069f4:	4b14      	ldr	r3, [pc, #80]	@ (8006a48 <USBD_LL_Init+0x94>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80069fa:	4b13      	ldr	r3, [pc, #76]	@ (8006a48 <USBD_LL_Init+0x94>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006a00:	4b11      	ldr	r3, [pc, #68]	@ (8006a48 <USBD_LL_Init+0x94>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006a06:	4b10      	ldr	r3, [pc, #64]	@ (8006a48 <USBD_LL_Init+0x94>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a48 <USBD_LL_Init+0x94>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a12:	480d      	ldr	r0, [pc, #52]	@ (8006a48 <USBD_LL_Init+0x94>)
 8006a14:	f7fa fa6f 	bl	8000ef6 <HAL_PCD_Init>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006a1e:	f7f9 fe4f 	bl	80006c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006a22:	2180      	movs	r1, #128	@ 0x80
 8006a24:	4808      	ldr	r0, [pc, #32]	@ (8006a48 <USBD_LL_Init+0x94>)
 8006a26:	f7fb fc9c 	bl	8002362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006a2a:	2240      	movs	r2, #64	@ 0x40
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4806      	ldr	r0, [pc, #24]	@ (8006a48 <USBD_LL_Init+0x94>)
 8006a30:	f7fb fc50 	bl	80022d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006a34:	2280      	movs	r2, #128	@ 0x80
 8006a36:	2101      	movs	r1, #1
 8006a38:	4803      	ldr	r0, [pc, #12]	@ (8006a48 <USBD_LL_Init+0x94>)
 8006a3a:	f7fb fc4b 	bl	80022d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20001610 	.word	0x20001610

08006a4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fa fb56 	bl	8001114 <HAL_PCD_Start>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f942 	bl	8006cf8 <USBD_Get_USB_Status>
 8006a74:	4603      	mov	r3, r0
 8006a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	4608      	mov	r0, r1
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	461a      	mov	r2, r3
 8006a90:	4603      	mov	r3, r0
 8006a92:	70fb      	strb	r3, [r7, #3]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70bb      	strb	r3, [r7, #2]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006aaa:	78bb      	ldrb	r3, [r7, #2]
 8006aac:	883a      	ldrh	r2, [r7, #0]
 8006aae:	78f9      	ldrb	r1, [r7, #3]
 8006ab0:	f7fb f82a 	bl	8001b08 <HAL_PCD_EP_Open>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 f91c 	bl	8006cf8 <USBD_Get_USB_Status>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	4611      	mov	r1, r2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fb f875 	bl	8001bdc <HAL_PCD_EP_Close>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 f8fd 	bl	8006cf8 <USBD_Get_USB_Status>
 8006afe:	4603      	mov	r3, r0
 8006b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b26:	78fa      	ldrb	r2, [r7, #3]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fb f92d 	bl	8001d8a <HAL_PCD_EP_SetStall>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 f8de 	bl	8006cf8 <USBD_Get_USB_Status>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b64:	78fa      	ldrb	r2, [r7, #3]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fb f971 	bl	8001e50 <HAL_PCD_EP_ClrStall>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 f8bf 	bl	8006cf8 <USBD_Get_USB_Status>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	da0b      	bge.n	8006bbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006baa:	68f9      	ldr	r1, [r7, #12]
 8006bac:	4613      	mov	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	3316      	adds	r3, #22
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	e00b      	b.n	8006bd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006bd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006bfa:	78fa      	ldrb	r2, [r7, #3]
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fa ff5e 	bl	8001ac0 <HAL_PCD_SetAddress>
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 f874 	bl	8006cf8 <USBD_Get_USB_Status>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b086      	sub	sp, #24
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006c3c:	7af9      	ldrb	r1, [r7, #11]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	f7fb f868 	bl	8001d16 <HAL_PCD_EP_Transmit>
 8006c46:	4603      	mov	r3, r0
 8006c48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 f853 	bl	8006cf8 <USBD_Get_USB_Status>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c56:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006c7e:	7af9      	ldrb	r1, [r7, #11]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	f7fa fff4 	bl	8001c70 <HAL_PCD_EP_Receive>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 f832 	bl	8006cf8 <USBD_Get_USB_Status>
 8006c94:	4603      	mov	r3, r0
 8006c96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c98:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fb f814 	bl	8001ce6 <HAL_PCD_EP_GetRxCount>
 8006cbe:	4603      	mov	r3, r0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006cd0:	4b03      	ldr	r3, [pc, #12]	@ (8006ce0 <USBD_static_malloc+0x18>)
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20001af4 	.word	0x20001af4

08006ce4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]

}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d817      	bhi.n	8006d3c <USBD_Get_USB_Status+0x44>
 8006d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <USBD_Get_USB_Status+0x1c>)
 8006d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d12:	bf00      	nop
 8006d14:	08006d25 	.word	0x08006d25
 8006d18:	08006d2b 	.word	0x08006d2b
 8006d1c:	08006d31 	.word	0x08006d31
 8006d20:	08006d37 	.word	0x08006d37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
    break;
 8006d28:	e00b      	b.n	8006d42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d2e:	e008      	b.n	8006d42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
    break;
 8006d34:	e005      	b.n	8006d42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d36:	2303      	movs	r3, #3
 8006d38:	73fb      	strb	r3, [r7, #15]
    break;
 8006d3a:	e002      	b.n	8006d42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d40:	bf00      	nop
  }
  return usb_status;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <memset>:
 8006d50:	4402      	add	r2, r0
 8006d52:	4603      	mov	r3, r0
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d100      	bne.n	8006d5a <memset+0xa>
 8006d58:	4770      	bx	lr
 8006d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5e:	e7f9      	b.n	8006d54 <memset+0x4>

08006d60 <__libc_init_array>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	4d0d      	ldr	r5, [pc, #52]	@ (8006d98 <__libc_init_array+0x38>)
 8006d64:	4c0d      	ldr	r4, [pc, #52]	@ (8006d9c <__libc_init_array+0x3c>)
 8006d66:	1b64      	subs	r4, r4, r5
 8006d68:	10a4      	asrs	r4, r4, #2
 8006d6a:	2600      	movs	r6, #0
 8006d6c:	42a6      	cmp	r6, r4
 8006d6e:	d109      	bne.n	8006d84 <__libc_init_array+0x24>
 8006d70:	4d0b      	ldr	r5, [pc, #44]	@ (8006da0 <__libc_init_array+0x40>)
 8006d72:	4c0c      	ldr	r4, [pc, #48]	@ (8006da4 <__libc_init_array+0x44>)
 8006d74:	f000 f818 	bl	8006da8 <_init>
 8006d78:	1b64      	subs	r4, r4, r5
 8006d7a:	10a4      	asrs	r4, r4, #2
 8006d7c:	2600      	movs	r6, #0
 8006d7e:	42a6      	cmp	r6, r4
 8006d80:	d105      	bne.n	8006d8e <__libc_init_array+0x2e>
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d88:	4798      	blx	r3
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	e7ee      	b.n	8006d6c <__libc_init_array+0xc>
 8006d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d92:	4798      	blx	r3
 8006d94:	3601      	adds	r6, #1
 8006d96:	e7f2      	b.n	8006d7e <__libc_init_array+0x1e>
 8006d98:	08006e2c 	.word	0x08006e2c
 8006d9c:	08006e2c 	.word	0x08006e2c
 8006da0:	08006e2c 	.word	0x08006e2c
 8006da4:	08006e30 	.word	0x08006e30

08006da8 <_init>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr

08006db4 <_fini>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	bf00      	nop
 8006db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dba:	bc08      	pop	{r3}
 8006dbc:	469e      	mov	lr, r3
 8006dbe:	4770      	bx	lr
